
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package plctopascal;

import java_cup.runtime.*;
import java.util.Map.Entry;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\004\000\002\004" +
    "\002\000\002\004\006\000\002\004\006\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\003\004\000" +
    "\002\003\003\000\002\006\004\000\002\026\002\000\002" +
    "\007\010\000\002\027\002\000\002\007\010\000\002\007" +
    "\007\000\002\030\002\000\002\010\006\000\002\010\005" +
    "\000\002\011\006\000\002\011\004\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\004\000\002" +
    "\013\004\000\002\013\003\000\002\014\005\000\002\014" +
    "\006\000\002\014\007\000\002\014\006\000\002\014\005" +
    "\000\002\014\011\000\002\014\007\000\002\014\010\000" +
    "\002\014\017\000\002\015\003\000\002\015\005\000\002" +
    "\016\003\000\002\016\005\000\002\017\005\000\002\017" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\023\006\000" +
    "\002\023\005\000\002\023\005\000\002\023\003\000\002" +
    "\023\003\000\002\024\005\000\002\024\003\000\002\024" +
    "\004\000\002\021\003\000\002\021\003\000\002\025\005" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\012\010\005\013\uffff\017\uffff\020\uffff\001" +
    "\002\000\010\013\020\017\021\020\023\001\002\000\004" +
    "\004\010\001\002\000\004\002\007\001\002\000\004\002" +
    "\000\001\002\000\012\003\013\005\015\006\011\007\014" +
    "\001\002\000\050\010\ufffb\012\ufffb\013\ufffb\016\ufffb\017" +
    "\ufffb\020\ufffb\021\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb" +
    "\027\ufffb\030\ufffb\032\ufffb\033\ufffb\035\ufffb\036\ufffb\037" +
    "\ufffb\040\ufffb\001\002\000\012\010\005\013\uffff\017\uffff" +
    "\020\uffff\001\002\000\012\010\005\013\uffff\017\uffff\020" +
    "\uffff\001\002\000\050\010\ufffa\012\ufffa\013\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\023\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\032\ufffa\033\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\040\ufffa\001\002\000\050\010\ufffc\012\ufffc\013" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\023\ufffc\024\ufffc" +
    "\025\ufffc\026\ufffc\027\ufffc\030\ufffc\032\ufffc\033\ufffc\035" +
    "\ufffc\036\ufffc\037\ufffc\040\ufffc\001\002\000\010\013\ufffe" +
    "\017\ufffe\020\ufffe\001\002\000\010\013\ufffd\017\ufffd\020" +
    "\ufffd\001\002\000\004\004\uffec\001\002\000\004\004\uffeb" +
    "\001\002\000\004\002\001\001\002\000\004\004\uffea\001" +
    "\002\000\012\002\ufff8\013\020\017\021\020\023\001\002" +
    "\000\004\004\027\001\002\000\012\002\ufff7\013\ufff7\017" +
    "\ufff7\020\ufff7\001\002\000\004\011\030\001\002\000\012" +
    "\003\032\013\031\017\021\020\023\001\002\000\006\004" +
    "\uffec\012\205\001\002\000\004\012\ufff6\001\002\000\006" +
    "\012\ufff4\016\037\001\002\000\004\004\035\001\002\000" +
    "\006\012\uffed\016\uffed\001\002\000\004\012\042\001\002" +
    "\000\010\013\020\017\021\020\023\001\002\000\004\004" +
    "\041\001\002\000\006\012\uffee\016\uffee\001\002\000\004" +
    "\014\043\001\002\000\026\003\056\004\046\013\020\017" +
    "\021\020\023\022\052\042\047\043\054\044\045\046\055" +
    "\001\002\000\012\002\ufff3\013\ufff3\017\ufff3\020\ufff3\001" +
    "\002\000\004\011\176\001\002\000\006\011\166\047\165" +
    "\001\002\000\004\011\157\001\002\000\026\004\046\013" +
    "\020\015\ufff1\017\021\020\023\022\052\042\047\043\054" +
    "\044\045\046\055\001\002\000\026\004\uffe7\013\uffe7\015" +
    "\uffe7\017\uffe7\020\uffe7\022\uffe7\042\uffe7\043\uffe7\044\uffe7" +
    "\046\uffe7\001\002\000\014\004\066\005\015\006\011\007" +
    "\014\011\070\001\002\000\004\004\145\001\002\000\004" +
    "\014\043\001\002\000\004\011\061\001\002\000\026\004" +
    "\046\013\020\015\057\017\021\020\023\022\052\042\047" +
    "\043\054\044\045\046\055\001\002\000\034\002\uffef\004" +
    "\uffef\013\uffef\015\uffef\017\uffef\020\uffef\022\uffef\041\uffef" +
    "\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\001\002\000" +
    "\026\004\uffe9\013\uffe9\015\uffe9\017\uffe9\020\uffe9\022\uffe9" +
    "\042\uffe9\043\uffe9\044\uffe9\046\uffe9\001\002\000\004\004" +
    "\062\001\002\000\004\047\063\001\002\000\014\004\066" +
    "\005\015\006\011\007\014\011\070\001\002\000\040\012" +
    "\uffd8\016\uffd8\021\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\032\uffd8\033\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\001\002\000\040\012\uffce\016\uffce\021\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\032" +
    "\uffce\033\uffce\035\uffce\036\uffce\037\uffce\040\uffce\001\002" +
    "\000\042\011\131\012\uffcf\016\uffcf\021\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\032\uffcf\033\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\001\002\000\016\021" +
    "\102\023\077\024\075\025\074\026\072\027\076\001\002" +
    "\000\014\004\066\005\015\006\011\007\014\011\070\001" +
    "\002\000\016\012\100\023\077\024\075\025\074\026\072" +
    "\027\076\001\002\000\014\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\011\uffd4\001\002\000\014\004\066\005\015\006\011" +
    "\007\014\011\070\001\002\000\014\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\011\uffd5\001\002\000\014\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\011\uffd6\001\002\000\014\004\uffd3\005" +
    "\uffd3\006\uffd3\007\uffd3\011\uffd3\001\002\000\014\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\011\uffd7\001\002\000\040\012" +
    "\uffd0\016\uffd0\021\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\032\uffd0\033\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\001\002\000\040\012\uffd9\016\uffd9\021\uffd9" +
    "\023\077\024\075\025\074\026\072\027\076\030\uffd9\032" +
    "\uffd9\033\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\001\002" +
    "\000\016\004\066\005\015\006\011\007\014\011\070\031" +
    "\103\001\002\000\014\004\066\005\015\006\011\007\014" +
    "\011\070\001\002\000\012\012\uffcc\021\uffcc\032\uffcc\033" +
    "\uffcc\001\002\000\026\023\077\024\075\025\074\026\072" +
    "\027\076\030\121\035\122\036\125\037\126\040\123\001" +
    "\002\000\010\021\110\032\107\033\111\001\002\000\016" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\011\uffca\031\uffca\001" +
    "\002\000\004\004\114\001\002\000\016\004\uffc9\005\uffc9" +
    "\006\uffc9\007\uffc9\011\uffc9\031\uffc9\001\002\000\016\004" +
    "\066\005\015\006\011\007\014\011\070\031\103\001\002" +
    "\000\012\012\uffcd\021\uffcd\032\107\033\111\001\002\000" +
    "\004\047\115\001\002\000\014\004\066\005\015\006\011" +
    "\007\014\011\070\001\002\000\016\012\117\023\077\024" +
    "\075\025\074\026\072\027\076\001\002\000\004\014\043" +
    "\001\002\000\026\004\uffde\013\uffde\015\uffde\017\uffde\020" +
    "\uffde\022\uffde\042\uffde\043\uffde\044\uffde\046\uffde\001\002" +
    "\000\014\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7\001" +
    "\002\000\014\004\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6" +
    "\001\002\000\014\004\uffc3\005\uffc3\006\uffc3\007\uffc3\011" +
    "\uffc3\001\002\000\014\004\066\005\015\006\011\007\014" +
    "\011\070\001\002\000\014\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\011\uffc5\001\002\000\014\004\uffc4\005\uffc4\006\uffc4" +
    "\007\uffc4\011\uffc4\001\002\000\024\012\uffc8\021\uffc8\023" +
    "\077\024\075\025\074\026\072\027\076\032\uffc8\033\uffc8" +
    "\001\002\000\012\012\uffcb\021\uffcb\032\uffcb\033\uffcb\001" +
    "\002\000\016\004\066\005\015\006\011\007\014\011\070" +
    "\012\133\001\002\000\006\012\136\016\135\001\002\000" +
    "\040\012\uffd1\016\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\032\uffd1\033\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\001\002\000\020\012\uffdb\016\uffdb" +
    "\023\077\024\075\025\074\026\072\027\076\001\002\000" +
    "\014\004\066\005\015\006\011\007\014\011\070\001\002" +
    "\000\040\012\uffd2\016\uffd2\021\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\032\uffd2\033\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\001\002\000\020\012\uffda\016" +
    "\uffda\023\077\024\075\025\074\026\072\027\076\001\002" +
    "\000\004\045\141\001\002\000\004\011\142\001\002\000" +
    "\016\004\066\005\015\006\011\007\014\011\070\031\103" +
    "\001\002\000\010\012\144\032\107\033\111\001\002\000" +
    "\026\004\uffdf\013\uffdf\015\uffdf\017\uffdf\020\uffdf\022\uffdf" +
    "\042\uffdf\043\uffdf\044\uffdf\046\uffdf\001\002\000\006\016" +
    "\uffdd\021\uffdd\001\002\000\006\016\150\021\147\001\002" +
    "\000\026\004\uffe6\013\uffe6\015\uffe6\017\uffe6\020\uffe6\022" +
    "\uffe6\042\uffe6\043\uffe6\044\uffe6\046\uffe6\001\002\000\004" +
    "\004\151\001\002\000\006\016\uffdc\021\uffdc\001\002\000" +
    "\016\021\153\023\077\024\075\025\074\026\072\027\076" +
    "\001\002\000\026\004\uffe2\013\uffe2\015\uffe2\017\uffe2\020" +
    "\uffe2\022\uffe2\042\uffe2\043\uffe2\044\uffe2\046\uffe2\001\002" +
    "\000\004\015\156\001\002\000\026\004\uffe8\013\uffe8\015" +
    "\uffe8\017\uffe8\020\uffe8\022\uffe8\042\uffe8\043\uffe8\044\uffe8" +
    "\046\uffe8\001\002\000\034\002\ufff0\004\ufff0\013\ufff0\015" +
    "\ufff0\017\ufff0\020\ufff0\022\ufff0\041\ufff0\042\ufff0\043\ufff0" +
    "\044\ufff0\045\ufff0\046\ufff0\001\002\000\016\004\066\005" +
    "\015\006\011\007\014\011\070\031\103\001\002\000\010" +
    "\012\161\032\107\033\111\001\002\000\004\014\043\001" +
    "\002\000\004\041\163\001\002\000\004\014\043\001\002" +
    "\000\026\004\uffe1\013\uffe1\015\uffe1\017\uffe1\020\uffe1\022" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\046\uffe1\001\002\000\014" +
    "\004\066\005\015\006\011\007\014\011\070\001\002\000" +
    "\016\004\066\005\015\006\011\007\014\011\070\012\170" +
    "\001\002\000\006\012\172\016\135\001\002\000\004\021" +
    "\171\001\002\000\026\004\uffe3\013\uffe3\015\uffe3\017\uffe3" +
    "\020\uffe3\022\uffe3\042\uffe3\043\uffe3\044\uffe3\046\uffe3\001" +
    "\002\000\004\021\173\001\002\000\026\004\uffe4\013\uffe4" +
    "\015\uffe4\017\uffe4\020\uffe4\022\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\046\uffe4\001\002\000\016\021\175\023\077\024\075" +
    "\025\074\026\072\027\076\001\002\000\026\004\uffe5\013" +
    "\uffe5\015\uffe5\017\uffe5\020\uffe5\022\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\046\uffe5\001\002\000\016\004\066\005\015\006" +
    "\011\007\014\011\070\031\103\001\002\000\010\012\200" +
    "\032\107\033\111\001\002\000\004\014\043\001\002\000" +
    "\026\004\uffe0\013\uffe0\015\uffe0\017\uffe0\020\uffe0\022\uffe0" +
    "\042\uffe0\043\uffe0\044\uffe0\046\uffe0\001\002\000\004\012" +
    "\203\001\002\000\004\014\043\001\002\000\012\002\ufff5" +
    "\013\ufff5\017\ufff5\020\ufff5\001\002\000\004\014\043\001" +
    "\002\000\012\002\ufff2\013\ufff2\017\ufff2\020\ufff2\001\002" +
    "\000\004\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\006\002\005\004\003\001\001\000\010\003" +
    "\021\006\023\012\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\011\001\001\000" +
    "\002\001\001\000\004\004\016\001\001\000\004\004\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\206\006" +
    "\023\012\024\001\001\000\004\007\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\032\012\033\001" +
    "\001\000\002\001\001\000\004\026\201\001\001\000\004" +
    "\027\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\043\001\001\000\010\012" +
    "\052\013\047\014\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\052\014\154\030\153\001\001\000\002\001\001\000\010" +
    "\005\064\017\151\023\063\001\001\000\004\015\145\001" +
    "\001\000\004\010\137\001\001\000\002\001\001\000\006" +
    "\012\052\014\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\064" +
    "\017\066\023\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\072\001\001\000\010" +
    "\005\064\017\070\023\063\001\001\000\004\020\072\001" +
    "\001\000\002\001\001\000\010\005\064\017\100\023\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\072" +
    "\001\001\000\014\005\064\017\104\023\063\024\105\025" +
    "\103\001\001\000\012\005\064\017\104\023\063\025\127" +
    "\001\001\000\002\001\001\000\006\020\072\022\123\001" +
    "\001\000\004\021\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\064\017\104\023" +
    "\063\024\112\025\103\001\001\000\004\021\111\001\001" +
    "\000\002\001\001\000\010\005\064\017\115\023\063\001" +
    "\001\000\004\020\072\001\001\000\004\010\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\064\017\126\023\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\072\001" +
    "\001\000\002\001\001\000\012\005\064\016\131\017\133" +
    "\023\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\072\001\001\000\010\005\064\017\136\023\063" +
    "\001\001\000\002\001\001\000\004\020\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\064\017\104" +
    "\023\063\024\142\025\103\001\001\000\004\021\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\064\017" +
    "\104\023\063\024\157\025\103\001\001\000\004\021\111" +
    "\001\001\000\004\010\161\001\001\000\002\001\001\000" +
    "\004\010\163\001\001\000\002\001\001\000\010\005\064" +
    "\017\173\023\063\001\001\000\012\005\064\016\166\017" +
    "\133\023\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\072\001\001\000\002\001\001\000\014\005\064" +
    "\017\104\023\063\024\176\025\103\001\001\000\004\021" +
    "\111\001\001\000\004\010\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\203\001\001\000\002\001" +
    "\001\000\004\010\205\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(String string, Symbol s){
		System.out.println(string + "Error localizado antes de: Linea "+s.left+" Columna "+s.right); 
	}
	public void unrecovered_syntax_error(String string, Symbol s){ 
                System.out.println("ERROR FATAL: " + string + "Error localizado antes de: Linea "+s.left+" Columna "+s.right); 
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= DEFINES PARTES 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Defines d = (Defines)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Partes p = (Partes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    //Tabular
    String res = "";
    int tabs = 0;
    int flag1= 0;
    int flag=0;
    for(int i=0; i<p.valor.length(); i++)
    {
        if(i+8<p.valor.length() && p.valor.substring(i,i+8).equals("function")) flag=1;
        else if(i+9<p.valor.length() && p.valor.substring(i,i+9).equals("procedure")) flag=1;
        if(i+5<p.valor.length() && p.valor.substring(i,i+5).equals("begin")) { tabs++; if(flag==1)  res+='\t'; flag1=2;  }
        else if(i+3<p.valor.length() && p.valor.substring(i,i+3).equals("end")) { tabs--;  flag1=3; }
        if(p.valor.charAt(i)=='\t' || flag1>1)
        {
            if(flag1==2 || flag==0) tabs--;
            if(flag1==3) tabs++;
            for(int j=0; j<tabs;j++)
            {
                res+='\t';
            }
            if(flag1==2 ||flag==0) tabs++;
            if(flag1==3) { tabs--; if(tabs==0) flag=0; }
            flag1=0;
        }
        res+=p.valor.charAt(i);
    }
    if(p.libreria)  System.out.println("unit libreria;\n" + d.valor + res + ".");
    else System.out.println("program main;\n" + d.valor + res + ".");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DEFINES ::= 
            {
              Defines RESULT =null;
		RESULT=new Defines();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DEFINES ::= Tdefine Tident error DEFINES 
            {
              Defines RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Defines d = (Defines)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        syntax_error("Error de la constante", cur_token); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEFINES ::= Tdefine Tident CTES DEFINES 
            {
              Defines RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Constantes c = (Constantes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Defines d1 = (Defines)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Defines();
        RESULT.valor = "const \t" + id + " = "+  c.valor + ";\n" + d1.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CTES ::= Tconstint 
            {
              Constantes RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ci = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Constantes();
    RESULT.valor=ci;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CTES ::= Tconstfloat 
            {
              Constantes RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Constantes();
    RESULT.valor=cf;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CTES ::= Tconstlit 
            {
              Constantes RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Constantes();
    RESULT.valor=cl;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PARTES ::= PART PARTES 
            {
              Partes RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Part p = (Part)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Partes p1 = (Partes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = new Partes(); RESULT.valor = p.valor + p1.valor; RESULT.libreria = p.libreria && p1.libreria; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARTES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PARTES ::= PART 
            {
              Partes RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Part p2 = (Part)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = new Partes(); RESULT.valor = p2.valor; RESULT.libreria = p2.libreria; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARTES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PART ::= TYPE RESTPART 
            {
              Part RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Restpart r = (Restpart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Part();
    if(r.valor.length()>3 && r.valor.substring(0,4).equals("main"))
        RESULT.valor = r.bloque;
    else {
        if(t.valor == "VOID") { RESULT.valor = "procedure " + r.valor + ";" + r.bloque; }
        else { RESULT.valor = "function " + r.valor + ": " + t.valor+";" + r.bloque;}
    }
    RESULT.libreria=r.libreria;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Restpart RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
    syntax_error("Error en lista de parámetros de " + id, cur_token);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RESTPART ::= Tident Tpara error NT$0 Tparc BLQ 
            {
              Restpart RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Restpart) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Restpart RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Listparam s = (Listparam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

    RESULT = new Restpart();
    String res="";
    int actual=2;
    int valores=0;
    for(Entry<String,Integer> entry : s.M.entrySet()) {         
            if(entry.getValue()==0 && actual==1) { res+= " : INTEGER; "; res += entry.getKey(); if(valores+1 == s.M.size()) { if(entry.getValue()==0)  { res+= " : REAL";} else res+=" : INTEGER"; }}
            else if(entry.getValue()==1 && actual==0) { res+= " : REAL; "; res += entry.getKey(); if(valores+1 == s.M.size()) { if(entry.getValue()==0)  { res+= " : REAL";} else res+=" : INTEGER"; }}
            else if(valores==0) { res+= entry.getKey(); if(valores+1 == s.M.size()) { if(entry.getValue()==0)  { res+= " : REAL";} else res+=" : INTEGER"; }}
            else if(valores+1 == s.M.size()) { if(entry.getValue()==0)  { res+= (", "+entry.getKey()+" : REAL");} else res+= (", "+entry.getKey()+" : INTEGER"); }
            else {  res+= (", "+entry.getKey());}
            if(entry.getValue()==1) actual=1; 
            else actual=0;  
            valores++;
    }
    if(s.M.size()==0) RESULT.valor = id;
    else RESULT.valor = id  + " ("+ res + ")";
    if(id.equals("main")) RESULT.libreria = false;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // RESTPART ::= Tident Tpara LISTPARAM NT$1 Tparc BLQ 
            {
              Restpart RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Restpart) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Listparam s = (Listparam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String s3 = b.valor.replace("$RE$", "\t"+id + " := ");
    RESULT.bloque = b.declaraciones + s3 + "\n";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RESTPART ::= Tident Tpara Tvoid Tparc BLQ 
            {
              Restpart RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Restpart();
    RESULT.valor = id;
    String s3 = b.valor.replace("$RE$", "\t"+id + " := ");
    RESULT.bloque = b.declaraciones + s3 + "\n";
    if(id.equals("main")) RESULT.libreria = false;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              Blq RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentlist s = (Sentlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

    RESULT = new Blq();
    RESULT.valor = "begin\n" + s.valor;
    RESULT.valor += "end";
    RESULT.declaraciones = "\n";
    int actual=2;
    int valores=0;
    int anterior=-1;
    for(Entry<String,Integer> entry : s.M.entrySet()) {     
            if(entry.getValue()==0 && actual==1) { RESULT.declaraciones+= " : INTEGER;\n"; RESULT.declaraciones += ("\tvar "+entry.getKey()); if(valores+1 == s.M.size()) { if(entry.getValue()==0)  { RESULT.declaraciones+= (entry.getKey()+" : REAL;\n");} else RESULT.declaraciones+= (entry.getKey()+" : INTEGER;\n");}}
            else if(entry.getValue()==1 && actual==0) { RESULT.declaraciones+= " : REAL;\n"; RESULT.declaraciones += ("\tvar "+entry.getKey());  if(valores+1 == s.M.size()) { if(entry.getValue()==0)  { RESULT.declaraciones+= (entry.getKey()+" : REAL;\n");} else RESULT.declaraciones+= (entry.getKey()+" : INTEGER;\n");}}
            else if(valores==0) { RESULT.declaraciones += "\tvar "; RESULT.declaraciones+= entry.getKey(); if(valores+1 == s.M.size()) { if(entry.getValue()==0)  { RESULT.declaraciones+= " : REAL;\n";} else RESULT.declaraciones+= " : INTEGER;\n";}}
            else if(valores+1 == s.M.size()) { if(entry.getValue()==0)  { RESULT.declaraciones+= (", "+entry.getKey()+" : REAL;\n");} else RESULT.declaraciones+= (", "+entry.getKey()+" : INTEGER;\n"); }
            else {  RESULT.declaraciones+= (", "+entry.getKey());}
            if(entry.getValue()==1) actual=1; 
            else actual=0;   
            valores++;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLQ ::= Tcora SENTLIST NT$2 Tcorc 
            {
              Blq RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Blq) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sentlist s = (Sentlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLQ ::= Tcora error Tcorc 
            {
              Blq RESULT =null;
		 
syntax_error("Error al final del bloque. ", cur_token);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTPARAM ::= LISTPARAM Tcoma TYPE Tident 
            {
              Listparam RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Listparam l = (Listparam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Listparam();
    for(Entry<String,Integer> entry : l.M.entrySet()) RESULT.M.put(entry.getKey(),entry.getValue());
    if(t.valor.equals("INTEGER")) RESULT.M.put(id,1);
    else RESULT.M.put(id,0);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTPARAM ::= TYPE Tident 
            {
              Listparam RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Listparam();
    if(t.valor.equals("INTEGER")) RESULT.M.put(id,1);
    else RESULT.M.put(id,0);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TYPE ::= Tvoid 
            {
              Tipo RESULT =null;
		
    RESULT = new Tipo();
    RESULT.valor = "VOID";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TYPE ::= Tint 
            {
              Tipo RESULT =null;
		
    RESULT = new Tipo();
    RESULT.valor = "INTEGER";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TYPE ::= Tfloat 
            {
              Tipo RESULT =null;
		
    RESULT = new Tipo();
    RESULT.valor = "REAL";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTLIST ::= error SENT 
            {
              Sentlist RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sent s = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    if(s.valor != "") syntax_error("Error en la sentencia anterior a " + s.valor , cur_token);
    else if(s.retorno != "") syntax_error("Error en la sentencia anterior a return " + s.retorno, cur_token);
    else {String aux = s.M.toString(); aux = aux.substring(1, aux.length()-3); syntax_error("Error en la sentencia previa a la declaracion de " + aux + ". ", cur_token);};

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTLIST ::= SENTLIST SENT 
            {
              Sentlist RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentlist s = (Sentlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sent s1 = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Sentlist();
    if(s1.valor!="" && s1.retorno!="")  RESULT.valor = s.valor + "$RE$" + s1.retorno + "\t" + s1.valor;
    else if(s1.valor!="") RESULT.valor = s.valor + "\t" + s1.valor;
    else if(s1.retorno!="") RESULT.valor = s.valor + "$RE$" + s1.retorno + s1.valor;
    else RESULT.valor = s.valor + s1.valor;
    for(Entry<String,Integer> entry : s.M.entrySet()) RESULT.M.put(entry.getKey(),entry.getValue());
    for(Entry<String,Integer> entry : s1.M.entrySet()) RESULT.M.put(entry.getKey(),entry.getValue());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTLIST ::= SENT 
            {
              Sentlist RESULT =null;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sent s2 = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Sentlist();
    if(s2.valor!="") RESULT.valor = "\t" + s2.valor;
    else RESULT.valor = s2.valor;
    if(s2.retorno!="")  RESULT.valor += ( "$RE$" + s2.retorno);
    RESULT.M = s2.M;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENT ::= TYPE LID Tpcoma 
            {
              Sent RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identificadores l = (Identificadores)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new Sent();
    if(t.valor.equals("INTEGER")) RESULT.M.put(l.valor,1);
    else RESULT.M.put(l.valor,0);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENT ::= Tident Tasig EXP Tpcoma 
            {
              Sent RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresiones e = (Expresiones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new Sent();
    RESULT.valor = id + " := " + e.valor +";\n";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENT ::= Tident Tpara LEXP Tparc Tpcoma 
            {
              Sent RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lexp l = (Lexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = new Sent();
    RESULT.valor = id+"("+l.valor+")"+";\n";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENT ::= Tident Tpara Tparc Tpcoma 
            {
              Sent RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    RESULT = new Sent();
    RESULT.valor = id+";\n";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENT ::= Treturn EXP Tpcoma 
            {
              Sent RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresiones e = (Expresiones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new Sent();
    RESULT.retorno =  e.valor + ";\n";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENT ::= Tif Tpara LCOND Tparc BLQ Telse BLQ 
            {
              Sent RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Lcond l = (Lcond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Blq b1 = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Sent();
    RESULT.valor = "if " + l.valor + " then\n" + b.valor + "\n\telse\n" + b1.valor +"\n"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENT ::= Twhile Tpara LCOND Tparc BLQ 
            {
              Sent RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lcond l = (Lcond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Sent();
    RESULT.valor = "while " + l.valor + " do\n" + b.valor + "\n";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENT ::= Tdo BLQ Tuntil Tpara LCOND Tparc 
            {
              Sent RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lcond l = (Lcond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new Sent();
    RESULT.valor = "repeat\n" + b.valor + "\n\tuntil " + l.valor+";\n"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= Tfor Tpara Tident Tasig EXP Tpcoma LCOND Tpcoma Tident Tasig EXP Tparc BLQ 
            {
              Sent RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expresiones e = (Expresiones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Lcond l = (Lcond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresiones e2 = (Expresiones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Sent();
    String[]tokens = l.valor.split("=|<|>|<=|>=");
    Boolean res = tokens[0].equals(id);
    if(e2.cmp.equals("+") && e2.aum.equals("1") && id.equals(id2) && res) {
        RESULT.valor = "for " + id + ":= " + e.valor;
        String re = "";
        int flag=1;
        for(int i=0; i<l.valor.length();i++)
        {
            if(flag==0) re += l.valor.charAt(i);
            if(l.valor.charAt(i)=='<'|| l.valor.charAt(i)=='>') flag=0;
        }
        RESULT.valor += (" to " +  re + " do");
        RESULT.valor  += (b.declaraciones + "\n" + b.valor + "\n");
    } else if(e2.cmp.equals("-") && e2.aum.equals("1") && id.equals(id2) && res) {
        RESULT.valor = "for " + id + ":= " + e.valor;
        String re = "";
        int flag=1;
        for(int i=0; i<l.valor.length();i++)
        {
            if(flag==0) re += l.valor.charAt(i);
            if(l.valor.charAt(i)=='<'|| l.valor.charAt(i)=='>') flag=0;
        }
        RESULT.valor += (" downto " +  re + " do");
        RESULT.valor  += (b.declaraciones + "\n" + b.valor + "\n");
    } else {
        String bloque = b.valor.substring(0,b.valor.length()-4);
        RESULT.valor= id+":="+e.valor+"\n\twhile " + l.valor + " do\n"+ b.declaraciones + "\n" + bloque + "\t\n\t"  + e2.id+":="+e2.valor +"\nend\n";
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LID ::= Tident 
            {
              Identificadores RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Identificadores();
    RESULT.valor = v1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LID ::= LID Tcoma Tident 
            {
              Identificadores RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identificadores l1 = (Identificadores)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Identificadores();
    RESULT.valor = l1.valor + ", " + v1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LEXP ::= EXP 
            {
              Lexp RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresiones v1 = (Expresiones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Lexp();
    RESULT.valor = v1.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LEXP ::= LEXP Tcoma EXP 
            {
              Lexp RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lexp l1 = (Lexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresiones v1 = (Expresiones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Lexp();
    RESULT.valor = l1.valor + ", " + v1.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= EXP OP EXP 
            {
              Expresiones RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresiones e1 = (Expresiones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operadores o = (Operadores)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresiones e2 = (Expresiones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Expresiones();
    RESULT.valor = e1.valor + " " + o.valor + " " + e2.valor;
    RESULT.id = e1.valor;
    RESULT.aum = e2.valor;
    RESULT.cmp = o.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= FACTOR 
            {
              Expresiones RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Expresiones();
    RESULT.valor = f.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP ::= Tmas 
            {
              Operadores RESULT =null;
		
    RESULT = new Operadores();
    RESULT.valor = "+";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP ::= Tmenos 
            {
              Operadores RESULT =null;
		
    RESULT = new Operadores();
    RESULT.valor = "-";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP ::= Tpor 
            {
              Operadores RESULT =null;
		
    RESULT = new Operadores();
    RESULT.valor = "*";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP ::= Tdiv 
            {
              Operadores RESULT =null;
		
    RESULT = new Operadores();
    RESULT.valor = "div";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP ::= Tmod 
            {
              Operadores RESULT =null;
		
    RESULT = new Operadores();
    RESULT.valor = "mod";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FACTOR ::= Tident Tpara LEXP Tparc 
            {
              Factor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lexp v1 = (Lexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new Factor();
    RESULT.valor = v+"(" + v1.valor + ")";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FACTOR ::= Tident Tpara Tparc 
            {
              Factor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = new Factor();
    RESULT.valor = v;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FACTOR ::= Tpara EXP Tparc 
            {
              Factor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresiones v = (Expresiones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new Factor();
    RESULT.valor = "("+v.valor+")";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FACTOR ::= Tident 
            {
              Factor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Factor();
    RESULT.valor = v;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FACTOR ::= CTES 
            {
              Factor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constantes v = (Constantes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Factor();
    RESULT.valor = v.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LCOND ::= LCOND OPL LCOND 
            {
              Lcond RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Lcond l1 = (Lcond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operadores o = (Operadores)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Lcond l2 = (Lcond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Lcond();
    RESULT.valor = l1.valor + " " + o.valor +" "+ l2.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LCOND ::= COND 
            {
              Lcond RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condicionales c = (Condicionales)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Lcond();
    RESULT.valor = c.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LCOND ::= Tneg COND 
            {
              Lcond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condicionales c1 = (Condicionales)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Lcond();
    RESULT.valor = "not" + " "+  c1.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPL ::= Tor 
            {
              Operadores RESULT =null;
		
    RESULT = new Operadores();
    RESULT.valor = "or";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPL ::= Tand 
            {
              Operadores RESULT =null;
		
    RESULT = new Operadores();
    RESULT.valor = "and";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COND ::= EXP OPR EXP 
            {
              Condicionales RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresiones e1 = (Expresiones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operadores o = (Operadores)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresiones e2 = (Expresiones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Condicionales();
    RESULT.valor = e1.valor + o.valor + e2.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPR ::= Teq 
            {
              Operadores RESULT =null;
		
    RESULT  = new Operadores();
    RESULT.valor = "=";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPR ::= Tmenor 
            {
              Operadores RESULT =null;
		
    RESULT  = new Operadores();
    RESULT.valor = "<";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPR ::= Tmayor 
            {
              Operadores RESULT =null;
		
    RESULT  = new Operadores();
    RESULT.valor = ">";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPR ::= Tmayori 
            {
              Operadores RESULT =null;
		
    RESULT = new Operadores();
    RESULT.valor = ">=";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPR ::= Tmenori 
            {
              Operadores RESULT =null;
		
    RESULT = new Operadores();
    RESULT.valor = "<=";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
