
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package traductorpascalc;

import java_cup.runtime.*;
import java.util.Map.Entry;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\007\000\002\002" +
    "\007\000\002\041\002\000\002\042\002\000\002\003\010" +
    "\000\002\004\002\000\002\004\004\000\002\005\003\000" +
    "\002\005\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\007\004\000\002\010" +
    "\006\000\002\010\007\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\005\000\002\013\005\000" +
    "\002\013\007\000\002\014\003\000\002\014\005\000\002" +
    "\015\010\000\002\043\002\000\002\016\013\000\002\017" +
    "\002\000\002\017\005\000\002\020\005\000\002\020\007" +
    "\000\002\021\003\000\002\021\003\000\002\022\004\000" +
    "\002\022\004\000\002\022\010\000\002\022\006\000\002" +
    "\022\007\000\002\022\012\000\002\023\003\000\002\023" +
    "\003\000\002\024\005\000\002\025\003\000\002\026\005" +
    "\000\002\026\003\000\002\027\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\031\003\000\002\031\005\000\002\031" +
    "\004\000\002\032\002\000\002\032\005\000\002\033\003" +
    "\000\002\033\005\000\002\034\004\000\002\035\005\000" +
    "\002\035\003\000\002\036\003\000\002\036\003\000\002" +
    "\037\005\000\002\037\005\000\002\037\004\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\006\004\006\034\004\001\002\000\004\005" +
    "\224\001\002\000\004\002\223\001\002\000\004\005\007" +
    "\001\002\000\004\011\010\001\002\000\014\013\ufffe\016" +
    "\ufffe\017\ufffe\035\ufffe\036\ufffe\001\002\000\014\013\ufffb" +
    "\016\ufffb\017\ufffb\035\ufffb\036\ufffb\001\002\000\004\012" +
    "\013\001\002\000\004\002\000\001\002\000\014\013\025" +
    "\016\017\017\016\035\021\036\020\001\002\000\016\012" +
    "\ufffa\013\ufffa\016\ufffa\017\ufffa\035\ufffa\036\ufffa\001\002" +
    "\000\004\005\213\001\002\000\004\005\176\001\002\000" +
    "\004\005\162\001\002\000\004\005\150\001\002\000\016" +
    "\012\ufff5\013\ufff5\016\ufff5\017\ufff5\035\ufff5\036\ufff5\001" +
    "\002\000\016\012\ufff4\013\ufff4\016\ufff4\017\ufff4\035\ufff4" +
    "\036\ufff4\001\002\000\016\012\ufff7\013\ufff7\016\ufff7\017" +
    "\ufff7\035\ufff7\036\ufff7\001\002\000\014\005\035\041\027" +
    "\044\030\046\031\050\037\001\002\000\016\012\ufff6\013" +
    "\ufff6\016\ufff6\017\ufff6\035\ufff6\036\ufff6\001\002\000\016" +
    "\005\045\006\051\007\052\010\046\021\115\053\117\001" +
    "\002\000\016\005\045\006\051\007\052\010\046\021\115" +
    "\053\117\001\002\000\014\013\ufffe\016\ufffe\017\ufffe\035" +
    "\ufffe\036\ufffe\001\002\000\016\005\035\014\ufffd\041\027" +
    "\044\030\046\031\050\037\001\002\000\016\005\ufff9\014" +
    "\ufff9\041\ufff9\044\ufff9\046\ufff9\050\ufff9\001\002\000\004" +
    "\011\106\001\002\000\010\011\uffca\021\075\031\uffd6\001" +
    "\002\000\004\031\103\001\002\000\004\005\042\001\002" +
    "\000\004\011\041\001\002\000\016\005\uffde\014\uffde\041" +
    "\uffde\044\uffde\046\uffde\050\uffde\001\002\000\004\031\043" +
    "\001\002\000\014\005\045\006\051\007\052\010\046\021" +
    "\053\001\002\000\050\011\uffd4\015\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\032\uffd4\033" +
    "\uffd4\042\uffd4\045\uffd4\051\uffd4\052\uffd4\054\uffd4\055\uffd4" +
    "\056\uffd4\057\uffd4\001\002\000\052\011\uffca\015\uffca\021" +
    "\075\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\032\uffca\033\uffca\042\uffca\045\uffca\051\uffca\052" +
    "\uffca\054\uffca\055\uffca\056\uffca\057\uffca\001\002\000\050" +
    "\011\uffee\015\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\032\uffee\033\uffee\042\uffee\045\uffee" +
    "\051\uffee\052\uffee\054\uffee\055\uffee\056\uffee\057\uffee\001" +
    "\002\000\020\023\056\024\062\025\064\026\057\027\060" +
    "\051\067\052\066\001\002\000\050\011\uffcd\015\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\032\uffcd\033\uffcd\042\uffcd\045\uffcd\051\uffcd\052\uffcd\054" +
    "\uffcd\055\uffcd\056\uffcd\057\uffcd\001\002\000\050\011\ufff0" +
    "\015\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\032\ufff0\033\ufff0\042\ufff0\045\ufff0\051\ufff0" +
    "\052\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\001\002\000" +
    "\050\011\uffef\015\uffef\022\uffef\023\uffef\024\uffef\025\uffef" +
    "\026\uffef\027\uffef\030\uffef\032\uffef\033\uffef\042\uffef\045" +
    "\uffef\051\uffef\052\uffef\054\uffef\055\uffef\056\uffef\057\uffef" +
    "\001\002\000\014\005\045\006\051\007\052\010\046\021" +
    "\053\001\002\000\016\022\061\023\056\024\062\025\064" +
    "\026\057\027\060\001\002\000\014\005\045\006\051\007" +
    "\052\010\046\021\053\001\002\000\014\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\021\uffd2\001\002\000\014\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\021\uffcf\001\002\000\014\005\uffce" +
    "\006\uffce\007\uffce\010\uffce\021\uffce\001\002\000\050\011" +
    "\uffcc\015\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\032\uffcc\033\uffcc\042\uffcc\045\uffcc\051" +
    "\uffcc\052\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\001\002" +
    "\000\014\005\uffd1\006\uffd1\007\uffd1\010\uffd1\021\uffd1\001" +
    "\002\000\014\005\uffd3\006\uffd3\007\uffd3\010\uffd3\021\uffd3" +
    "\001\002\000\014\005\uffd0\006\uffd0\007\uffd0\010\uffd0\021" +
    "\uffd0\001\002\000\050\011\uffd5\015\uffd5\022\uffd5\023\056" +
    "\024\062\025\064\026\057\027\060\030\uffd5\032\uffd5\033" +
    "\uffd5\042\uffd5\045\uffd5\051\uffd5\052\uffd5\054\uffd5\055\uffd5" +
    "\056\uffd5\057\uffd5\001\002\000\014\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\021\uffd9\001\002\000\014\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\021\uffd8\001\002\000\014\005\045\006" +
    "\051\007\052\010\046\021\053\001\002\000\016\023\056" +
    "\024\062\025\064\026\057\027\060\045\072\001\002\000" +
    "\014\013\ufffe\016\ufffe\017\ufffe\035\ufffe\036\ufffe\001\002" +
    "\000\016\005\uffda\014\uffda\041\uffda\044\uffda\046\uffda\050" +
    "\uffda\001\002\000\050\011\uffcb\015\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\032\uffcb\033" +
    "\uffcb\042\uffcb\045\uffcb\051\uffcb\052\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\001\002\000\014\005\045\006\051\007" +
    "\052\010\046\021\053\001\002\000\020\022\uffc8\023\056" +
    "\024\062\025\064\026\057\027\060\030\101\001\002\000" +
    "\004\022\100\001\002\000\050\011\uffc9\015\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\032" +
    "\uffc9\033\uffc9\042\uffc9\045\uffc9\051\uffc9\052\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\001\002\000\014\005\045\006" +
    "\051\007\052\010\046\021\053\001\002\000\004\022\uffc7" +
    "\001\002\000\014\005\045\006\051\007\052\010\046\021" +
    "\053\001\002\000\016\011\uffd7\023\056\024\062\025\064" +
    "\026\057\027\060\001\002\000\004\011\uffc6\001\002\000" +
    "\016\005\uffdf\014\uffdf\041\uffdf\044\uffdf\046\uffdf\050\uffdf" +
    "\001\002\000\004\014\111\001\002\000\016\005\ufff8\014" +
    "\ufff8\041\ufff8\044\ufff8\046\ufff8\050\ufff8\001\002\000\026" +
    "\005\ufffc\011\ufffc\012\ufffc\014\ufffc\041\ufffc\043\ufffc\044" +
    "\ufffc\046\ufffc\047\ufffc\050\ufffc\001\002\000\004\047\113" +
    "\001\002\000\016\005\045\006\051\007\052\010\046\021" +
    "\115\053\117\001\002\000\014\011\uffc4\032\uffc4\033\uffc4" +
    "\042\uffc4\045\uffc4\001\002\000\014\005\045\006\051\007" +
    "\052\010\046\021\053\001\002\000\026\015\134\023\056" +
    "\024\062\025\064\026\057\027\060\054\130\055\133\056" +
    "\131\057\127\001\002\000\016\005\045\006\051\007\052" +
    "\010\046\021\115\053\117\001\002\000\010\011\124\032" +
    "\121\033\123\001\002\000\016\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\021\uffc2\053\uffc2\001\002\000\016\005\045\006" +
    "\051\007\052\010\046\021\115\053\117\001\002\000\016" +
    "\005\uffc3\006\uffc3\007\uffc3\010\uffc3\021\uffc3\053\uffc3\001" +
    "\002\000\016\005\uffdb\014\uffdb\041\uffdb\044\uffdb\046\uffdb" +
    "\050\uffdb\001\002\000\014\011\uffc5\032\121\033\123\042" +
    "\uffc5\045\uffc5\001\002\000\014\011\uffbf\032\uffbf\033\uffbf" +
    "\042\uffbf\045\uffbf\001\002\000\014\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\021\uffbb\001\002\000\014\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\021\uffbe\001\002\000\014\005\uffbc\006" +
    "\uffbc\007\uffbc\010\uffbc\021\uffbc\001\002\000\014\005\045" +
    "\006\051\007\052\010\046\021\053\001\002\000\014\005" +
    "\uffbd\006\uffbd\007\uffbd\010\uffbd\021\uffbd\001\002\000\014" +
    "\005\uffba\006\uffba\007\uffba\010\uffba\021\uffba\001\002\000" +
    "\026\011\uffc1\023\056\024\062\025\064\026\057\027\060" +
    "\032\uffc1\033\uffc1\042\uffc1\045\uffc1\001\002\000\016\022" +
    "\137\023\056\024\062\025\064\026\057\027\060\001\002" +
    "\000\040\011\uffc0\015\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\032\uffc0\033\uffc0\042\uffc0\045\uffc0\054\uffcc" +
    "\055\uffcc\056\uffcc\057\uffcc\001\002\000\010\032\121\033" +
    "\123\045\141\001\002\000\014\013\ufffe\016\ufffe\017\ufffe" +
    "\035\ufffe\036\ufffe\001\002\000\016\005\uffdc\014\uffdc\041" +
    "\uffdc\044\uffdc\046\uffdc\050\uffdc\001\002\000\010\032\121" +
    "\033\123\042\144\001\002\000\014\013\ufffe\016\ufffe\017" +
    "\ufffe\035\ufffe\036\ufffe\001\002\000\004\043\146\001\002" +
    "\000\014\013\ufffe\016\ufffe\017\ufffe\035\ufffe\036\ufffe\001" +
    "\002\000\016\005\uffdd\014\uffdd\041\uffdd\044\uffdd\046\uffdd" +
    "\050\uffdd\001\002\000\004\015\156\001\002\000\020\005" +
    "\152\012\ufff3\013\ufff3\016\ufff3\017\ufff3\035\ufff3\036\ufff3" +
    "\001\002\000\004\015\153\001\002\000\010\006\051\007" +
    "\052\010\046\001\002\000\004\011\155\001\002\000\020" +
    "\005\ufff1\012\ufff1\013\ufff1\016\ufff1\017\ufff1\035\ufff1\036" +
    "\ufff1\001\002\000\010\006\051\007\052\010\046\001\002" +
    "\000\004\011\160\001\002\000\020\005\ufff2\012\ufff2\013" +
    "\ufff2\016\ufff2\017\ufff2\035\ufff2\036\ufff2\001\002\000\004" +
    "\020\174\001\002\000\006\020\uffea\030\172\001\002\000" +
    "\004\011\164\001\002\000\020\005\162\012\uffed\013\uffed" +
    "\016\uffed\017\uffed\035\uffed\036\uffed\001\002\000\004\020" +
    "\166\001\002\000\006\037\171\040\167\001\002\000\006" +
    "\011\uffe0\022\uffe0\001\002\000\004\011\uffeb\001\002\000" +
    "\006\011\uffe1\022\uffe1\001\002\000\004\005\162\001\002" +
    "\000\004\020\uffe9\001\002\000\006\037\171\040\167\001" +
    "\002\000\004\011\uffec\001\002\000\006\011\uffe5\021\200" +
    "\001\002\000\004\011\210\001\002\000\004\005\162\001" +
    "\002\000\004\022\207\001\002\000\004\020\203\001\002" +
    "\000\006\037\171\040\167\001\002\000\006\011\205\022" +
    "\uffe3\001\002\000\004\005\162\001\002\000\004\022\uffe2" +
    "\001\002\000\006\011\uffe4\020\uffe4\001\002\000\014\013" +
    "\ufffe\016\ufffe\017\ufffe\035\ufffe\036\ufffe\001\002\000\004" +
    "\011\212\001\002\000\016\012\uffe8\013\uffe8\016\uffe8\017" +
    "\uffe8\035\uffe8\036\uffe8\001\002\000\006\020\uffe7\021\uffe7" +
    "\001\002\000\006\020\uffe5\021\200\001\002\000\004\020" +
    "\216\001\002\000\006\037\171\040\167\001\002\000\004" +
    "\011\220\001\002\000\014\013\ufffe\016\ufffe\017\ufffe\035" +
    "\ufffe\036\ufffe\001\002\000\004\011\222\001\002\000\016" +
    "\012\uffe6\013\uffe6\016\uffe6\017\uffe6\035\uffe6\036\uffe6\001" +
    "\002\000\004\002\001\001\002\000\004\011\225\001\002" +
    "\000\014\012\ufffb\016\ufffb\017\ufffb\035\ufffb\036\ufffb\001" +
    "\002\000\014\012\227\016\017\017\016\035\021\036\020" +
    "\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\011\041\010\001\001\000\004\004\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\014\007\023" +
    "\012\025\015\021\016\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\162\014\160" +
    "\001\001\000\004\010\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\031\022\032" +
    "\024\033\025\035\034\037\001\001\000\002\001\001\000" +
    "\014\011\047\026\115\031\043\035\142\037\113\001\001" +
    "\000\014\011\047\026\115\031\043\035\137\037\113\001" +
    "\001\000\006\003\111\041\010\001\001\000\014\022\107" +
    "\024\033\025\035\034\037\042\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\047\026\046\031\043" +
    "\001\001\000\002\001\001\000\004\032\073\001\001\000" +
    "\002\001\001\000\010\023\067\027\054\030\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\047\026\053\031\043\001\001\000\006\027\054" +
    "\030\062\001\001\000\010\011\047\026\064\031\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\054\030\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\047\026\070\031" +
    "\043\001\001\000\006\027\054\030\062\001\001\000\006" +
    "\003\072\041\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\047\026\075\031\043\033\076\001\001" +
    "\000\006\027\054\030\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\047\026\075\031\043\033\101" +
    "\001\001\000\002\001\001\000\010\011\047\026\103\031" +
    "\043\001\001\000\006\027\054\030\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\011\047" +
    "\026\115\031\043\035\117\037\113\001\001\000\002\001" +
    "\001\000\010\011\047\026\135\031\043\001\001\000\010" +
    "\027\054\030\062\040\131\001\001\000\012\011\047\026" +
    "\115\031\043\037\125\001\001\000\004\036\121\001\001" +
    "\000\002\001\001\000\014\011\047\026\115\031\043\035" +
    "\124\037\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\047" +
    "\026\134\031\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\054\030\062\001\001\000\006\027\054" +
    "\030\062\001\001\000\002\001\001\000\004\036\121\001" +
    "\001\000\006\003\141\041\010\001\001\000\002\001\001" +
    "\000\004\036\121\001\001\000\006\003\144\041\010\001" +
    "\001\000\002\001\001\000\006\003\146\041\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\164\001\001\000\002\001" +
    "\001\000\004\021\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\172\001\001\000" +
    "\002\001\001\000\004\021\174\001\001\000\002\001\001" +
    "\000\004\017\176\001\001\000\002\001\001\000\006\014" +
    "\201\020\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\203\001\001\000\002\001\001\000\006\014" +
    "\201\020\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\210\041\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\213\001\001\000\004\017\214" +
    "\001\001\000\002\001\001\000\004\021\216\001\001\000" +
    "\002\001\001\000\006\003\220\041\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\225\001\001\000\014\006\014\007\023" +
    "\012\025\015\021\016\022\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(String string, Symbol s){
		System.out.println(string + "Error localizado antes de: Linea "+s.left+" Columna "+s.right); 
	}
	public void unrecovered_syntax_error(String string, Symbol s){ 
                System.out.println("ERROR FATAL: " + string + "Error localizado antes de: Linea "+s.left+" Columna "+s.right); 
        }	
        ArrayList<String> var = new ArrayList<String>();
        ArrayList<String> fun = new ArrayList<String>();
        int nivel = 0;
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PRG ::= program_ identifier puntoComa BLQ punto 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        
        RESULT = b.cab + "void main (void) \n{\n" + b.valor + b.cierre;
        System.out.println(""+RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRG ::= unit_ identifier puntoComa DCLLIST punto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Blq RESULT =null;
nivel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Blq RESULT =(Blq) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentList sList = (SentList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
nivel--;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLQ ::= NT$0 DCLLIST begin_ SENTLIST NT$1 end_ 
            {
              Blq RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Blq) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SentList sList = (SentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = new Blq();
        RESULT.cab = dList.valor;
        RESULT.apertura = "\n{ \n";           
        RESULT.cierre = "} \n";
        RESULT.valor = sList.valor;
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DCLLIST ::= 
            {
              DcList RESULT =null;
		
        RESULT = new DcList();
        RESULT.valor = "";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DCLLIST ::= DCLLIST DCL 
            {
              DcList RESULT =null;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        RESULT = new DcList();
        RESULT.valor = dList.valor + d.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTLIST ::= SENT 
            {
              SentList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sent s = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new SentList();
        RESULT.valor = s.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTLIST ::= SENTLIST SENT 
            {
              SentList RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentList sList = (SentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sent s = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new SentList();
        RESULT.valor = sList.valor + s.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCL ::= DEFCTE 
            {
              Def RESULT =null;
		int dCteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dCteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefCte dCte = (DefCte)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dCte.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DCL ::= DEFVAR 
            {
              Def RESULT =null;
		int dVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefVar dVar = (DefVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dVar.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DCL ::= DEFPROC 
            {
              Def RESULT =null;
		int dProcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dProcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefProc dProc = (DefProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dProc.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DCL ::= DEFFUN 
            {
              Def RESULT =null;
		int dFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefFun dFun = (DefFun)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dFun.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEFCTE ::= const_ CTELIST 
            {
              DefCte RESULT =null;
		int cListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CteList cList = (CteList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new DefCte();
        RESULT.valor = cList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CTELIST ::= identifier igual SIMPVALUE puntoComa 
            {
              CteList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Constantes sv = (Constantes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new CteList();
        RESULT.valor = "#define " + id + " " + sv.valor +"\n";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CTELIST ::= CTELIST identifier igual SIMPVALUE puntoComa 
            {
              CteList RESULT =null;
		int cListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CteList cList = (CteList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Constantes sv = (Constantes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new CteList();
        RESULT.valor = cList.valor + "#define " + id + " " + sv.valor + "\n"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SIMPVALUE ::= numeric_integer_const 
            {
              Constantes RESULT =null;
		int nicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nic = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Constantes();
        RESULT.valor = nic;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SIMPVALUE ::= numeric_real_const 
            {
              Constantes RESULT =null;
		int nrcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nrcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nrc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Constantes();
        RESULT.valor = nrc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SIMPVALUE ::= string_const 
            {
              Constantes RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Constantes();
        RESULT.valor = sc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEFVAR ::= var_ DEFVARLIST puntoComa 
            {
              DefVar RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dvListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefVarList dvList = (DefVarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new DefVar();
        RESULT.valor = dvList.cab + " " + dvList.valor + ";\n" ;
        for(int k = 0;k<nivel-1;k++)
        {
            RESULT.valor = "\t" + RESULT.valor;
        }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEFVARLIST ::= VARLIST dosPuntos TBAS 
            {
              DefVarList RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new DefVarList();
        RESULT.valor = vList.valor;
        RESULT.cab = t.valor;
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DEFVARLIST ::= DEFVARLIST puntoComa VARLIST dosPuntos TBAS 
            {
              DefVarList RESULT =null;
		int dvListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dvListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DefVarList dvList = (DefVarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new DefVarList();
        RESULT.valor = dvList.valor + ";\n";
        for(int k = 0;k<nivel-1;k++)
        {
            RESULT.valor = RESULT.valor + "\t" ;
        }
        RESULT.valor = RESULT.valor + t.valor+ " " + vList.valor;
        RESULT.cab = dvList.cab;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VARLIST ::= identifier 
            {
              VarList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new VarList();
        RESULT.valor = id;
        RESULT.max = 1;
        RESULT.lista[0] = id;
        var.add(id);
 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VARLIST ::= identifier coma VARLIST 
            {
              VarList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new VarList();
        RESULT.valor = id + ", " + vList.valor; // para cuando no es una funcion
        for(int i =0; i<vList.max;i++)
        {
            RESULT.lista[i] = vList.lista[i];
        }
        RESULT.lista[vList.max]= id;
        RESULT.max = vList.max +1;
        var.add(id);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEFPROC ::= procedure_ identifier FORMAL_PARAMLIST puntoComa BLQ puntoComa 
            {
              DefProc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FormalParamList fpList = (FormalParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new DefProc();
        RESULT.valor =  "void " + id + fpList.valor + b.apertura +b.cab + b.valor  + b.cierre;
        fun.add(id);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$2 ::= 
            {
              DefFun RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
fun.add(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEFFUN ::= function_ identifier NT$2 FORMAL_PARAMLIST dosPuntos TBAS puntoComa BLQ puntoComa 
            {
              DefFun RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (DefFun) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FormalParamList fp = (FormalParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new DefFun();
        RESULT.valor =  t.valor +" "+ id +" "+ fp.valor  + b.apertura + b.cab + b.valor + b.cierre;
        fun.add(id);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FORMAL_PARAMLIST ::= 
            {
              FormalParamList RESULT =null;
		
        RESULT = new FormalParamList();
        RESULT.valor = "( void )";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FORMAL_PARAMLIST ::= abrirPar FORMAL_PARAM cerrarPar 
            {
              FormalParamList RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalParam fp = (FormalParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new FormalParamList();
        RESULT.valor = "("+fp.valor+")";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS 
            {
              FormalParam RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new FormalParam();
        RESULT.valor = t.valor + " " + vList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS puntoComa FORMAL_PARAM 
            {
              FormalParam RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalParam fp = (FormalParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new FormalParam();
        //RESULT.valor = t.valor +" "+ vList.valor + ", " + fp.valor;
        for (int i=vList.max;i>0;i--)
        {
            RESULT.valor = RESULT.valor + t.valor+" "+vList.lista[i-1]+", ";
        }
        RESULT.valor = RESULT.valor + " " + fp.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TBAS ::= int_ 
            {
              Tipo RESULT =null;
		
        RESULT = new Tipo();
        RESULT.valor = "int";        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TBAS ::= real_ 
            {
              Tipo RESULT =null;
		
        RESULT = new Tipo();
        RESULT.valor = "float";        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENT ::= ASIG puntoComa 
            {
              Sent RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asig a = (Asig)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Sent();
        RESULT.valor = a.valor + "; \n";
        for(int m=0;m<nivel-1;m++)
        {
            RESULT.valor = "\t" + RESULT.valor + "HOLA";
            System.out.println(nivel);
        }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= PROC_CALL puntoComa 
            {
              Sent RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcCall pc = (ProcCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Sent();
        RESULT.valor = pc.valor + "; \n" ;
        for(int j=0;j<nivel-1;j++)
        {
            RESULT.valor = "\t" + RESULT.valor;
        }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT ::= if_ EXPCOND then_ BLQ else_ BLQ 
            {
              Sent RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENT ::= while_ EXPCOND do_ BLQ 
            {
              Sent RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENT ::= repeat_ BLQ until_ EXPCOND puntoComa 
            {
              Sent RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENT ::= for_ identifier puntosIgual EXP INC EXP do_ BLQ 
            {
              Sent RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INC ::= to_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INC ::= downto_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIG ::= ID puntosIgual EXP 
            {
              Asig RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Asig();
        RESULT.valor = id.valor + " = " + e.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ID ::= identifier 
            {
              Id RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new Id();
        RESULT.valor=id;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= EXP OP EXP 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Op o = (Op)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Exp();
        RESULT.valor = e1.valor + o.valor + e2.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= FACTOR 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Exp();
        RESULT.valor = f.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP ::= OPARIT 
            {
              Op RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operadores op = (Operadores)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Op();
        RESULT.valor = op.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPARIT ::= mas_ 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "+ ";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPARIT ::= menos 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "- ";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPARIT ::= mul 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "* ";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPARIT ::= div_ 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "/ ";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPARIT ::= mod_ 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "% "; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FACTOR ::= SIMPVALUE 
            {
              Factor RESULT =null;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constantes sv = (Constantes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new Factor();
        RESULT.valor= sv.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FACTOR ::= abrirPar EXP cerrarPar 
            {
              Factor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT=new Factor();
        RESULT.valor = "(" + e.valor + ")"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FACTOR ::= identifier SUBPPARAMLIST 
            {
              Factor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SubPparamList subList = (SubPparamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new Factor();
        if (subList.valor == "")
        {
            if(fun.contains(id))
                RESULT.valor = id + "()";
            else
                RESULT.valor = id;
        }
        else
            RESULT.valor = id + subList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SUBPPARAMLIST ::= 
            {
              SubPparamList RESULT =null;
		
        RESULT = new SubPparamList();
        RESULT.valor = "";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SUBPPARAMLIST ::= abrirPar EXPLIST cerrarPar 
            {
              SubPparamList RESULT =null;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList eList = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new SubPparamList();
        RESULT.valor = "(" + eList.valor + ")";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPLIST ::= EXP 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ExpList();
        RESULT.valor = e.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPLIST ::= EXP coma EXPLIST 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList eList = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ExpList();
        RESULT.valor = e.valor + ", " + eList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PROC_CALL ::= identifier SUBPPARAMLIST 
            {
              ProcCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SubPparamList subList = (SubPparamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ProcCall();
        if (subList.valor == "")
        {
            if(fun.contains(id))
                RESULT.valor = id + "()";
            else
                RESULT.valor = id;
        }
        else
            RESULT.valor = id + subList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPCOND ::= EXPCOND OPLOG EXPCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPCOND ::= FACTORCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPLOG ::= or_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPLOG ::= and_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FACTORCOND ::= EXP OPCOMP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FACTORCOND ::= abrirPar EXP cerrarPar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FACTORCOND ::= not_ FACTORCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPCOMP ::= menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPCOMP ::= mayor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPCOMP ::= menorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPCOMP ::= mayorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPCOMP ::= igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
