
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package traductorpascalc;

import java_cup.runtime.*;
import java.util.Map.Entry;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\007\000\002\002" +
    "\007\000\002\041\002\000\002\042\002\000\002\043\002" +
    "\000\002\044\002\000\002\003\012\000\002\004\002\000" +
    "\002\004\004\000\002\005\003\000\002\005\004\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\004\000\002\010\006\000\002\010\007" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\012\005\000\002\013\005\000\002\013\007\000\002" +
    "\014\003\000\002\014\005\000\002\045\002\000\002\015" +
    "\011\000\002\046\002\000\002\016\013\000\002\017\002" +
    "\000\002\017\005\000\002\020\005\000\002\020\007\000" +
    "\002\021\003\000\002\021\003\000\002\022\004\000\002" +
    "\022\004\000\002\022\010\000\002\022\006\000\002\022" +
    "\007\000\002\022\012\000\002\023\003\000\002\023\003" +
    "\000\002\024\005\000\002\025\003\000\002\026\005\000" +
    "\002\026\003\000\002\027\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\031\003\000\002\031\005\000\002\031\004" +
    "\000\002\032\002\000\002\032\005\000\002\033\003\000" +
    "\002\033\005\000\002\034\004\000\002\035\005\000\002" +
    "\035\003\000\002\036\003\000\002\036\003\000\002\037" +
    "\005\000\002\037\005\000\002\037\004\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\006\004\006\034\004\001\002\000\004\005" +
    "\227\001\002\000\004\002\226\001\002\000\004\005\007" +
    "\001\002\000\004\011\010\001\002\000\014\013\ufffe\016" +
    "\ufffe\017\ufffe\035\ufffe\036\ufffe\001\002\000\014\013\ufff9" +
    "\016\ufff9\017\ufff9\035\ufff9\036\ufff9\001\002\000\004\012" +
    "\013\001\002\000\004\002\000\001\002\000\014\013\ufffd" +
    "\016\020\017\017\035\022\036\021\001\002\000\016\012" +
    "\ufff8\013\ufff8\016\ufff8\017\ufff8\035\ufff8\036\ufff8\001\002" +
    "\000\004\013\106\001\002\000\004\005\076\001\002\000" +
    "\004\005\060\001\002\000\004\005\044\001\002\000\004" +
    "\005\027\001\002\000\016\012\ufff3\013\ufff3\016\ufff3\017" +
    "\ufff3\035\ufff3\036\ufff3\001\002\000\016\012\ufff2\013\ufff2" +
    "\016\ufff2\017\ufff2\035\ufff2\036\ufff2\001\002\000\016\012" +
    "\ufff5\013\ufff5\016\ufff5\017\ufff5\035\ufff5\036\ufff5\001\002" +
    "\000\016\012\ufff4\013\ufff4\016\ufff4\017\ufff4\035\ufff4\036" +
    "\ufff4\001\002\000\004\015\040\001\002\000\020\005\031" +
    "\012\ufff1\013\ufff1\016\ufff1\017\ufff1\035\ufff1\036\ufff1\001" +
    "\002\000\004\015\032\001\002\000\010\006\035\007\036" +
    "\010\033\001\002\000\050\011\uffec\015\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\032\uffec" +
    "\033\uffec\042\uffec\045\uffec\051\uffec\052\uffec\054\uffec\055" +
    "\uffec\056\uffec\057\uffec\001\002\000\004\011\037\001\002" +
    "\000\050\011\uffee\015\uffee\022\uffee\023\uffee\024\uffee\025" +
    "\uffee\026\uffee\027\uffee\030\uffee\032\uffee\033\uffee\042\uffee" +
    "\045\uffee\051\uffee\052\uffee\054\uffee\055\uffee\056\uffee\057" +
    "\uffee\001\002\000\050\011\uffed\015\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\032\uffed\033" +
    "\uffed\042\uffed\045\uffed\051\uffed\052\uffed\054\uffed\055\uffed" +
    "\056\uffed\057\uffed\001\002\000\020\005\uffef\012\uffef\013" +
    "\uffef\016\uffef\017\uffef\035\uffef\036\uffef\001\002\000\010" +
    "\006\035\007\036\010\033\001\002\000\004\011\042\001" +
    "\002\000\020\005\ufff0\012\ufff0\013\ufff0\016\ufff0\017\ufff0" +
    "\035\ufff0\036\ufff0\001\002\000\004\020\056\001\002\000" +
    "\006\020\uffe8\030\054\001\002\000\004\011\046\001\002" +
    "\000\020\005\044\012\uffeb\013\uffeb\016\uffeb\017\uffeb\035" +
    "\uffeb\036\uffeb\001\002\000\004\020\050\001\002\000\006" +
    "\037\053\040\052\001\002\000\004\011\uffe9\001\002\000" +
    "\006\011\uffdd\022\uffdd\001\002\000\006\011\uffde\022\uffde" +
    "\001\002\000\004\005\044\001\002\000\004\020\uffe7\001" +
    "\002\000\006\037\053\040\052\001\002\000\004\011\uffea" +
    "\001\002\000\006\011\uffe6\021\uffe6\001\002\000\006\011" +
    "\uffe2\021\063\001\002\000\004\011\073\001\002\000\004" +
    "\005\044\001\002\000\004\020\067\001\002\000\004\022" +
    "\066\001\002\000\006\011\uffe1\020\uffe1\001\002\000\006" +
    "\037\053\040\052\001\002\000\006\011\071\022\uffe0\001" +
    "\002\000\004\005\044\001\002\000\004\022\uffdf\001\002" +
    "\000\014\013\ufffe\016\ufffe\017\ufffe\035\ufffe\036\ufffe\001" +
    "\002\000\004\011\075\001\002\000\016\012\uffe5\013\uffe5" +
    "\016\uffe5\017\uffe5\035\uffe5\036\uffe5\001\002\000\006\020" +
    "\uffe4\021\uffe4\001\002\000\006\020\uffe2\021\063\001\002" +
    "\000\004\020\101\001\002\000\006\037\053\040\052\001" +
    "\002\000\004\011\103\001\002\000\014\013\ufffe\016\ufffe" +
    "\017\ufffe\035\ufffe\036\ufffe\001\002\000\004\011\105\001" +
    "\002\000\016\012\uffe3\013\uffe3\016\uffe3\017\uffe3\035\uffe3" +
    "\036\uffe3\001\002\000\014\005\ufffc\041\ufffc\044\ufffc\046" +
    "\ufffc\050\ufffc\001\002\000\014\005\116\041\110\044\111" +
    "\046\112\050\120\001\002\000\016\005\126\006\035\007" +
    "\036\010\033\021\173\053\175\001\002\000\016\005\126" +
    "\006\035\007\036\010\033\021\173\053\175\001\002\000" +
    "\014\013\ufffe\016\ufffe\017\ufffe\035\ufffe\036\ufffe\001\002" +
    "\000\016\005\116\014\ufffb\041\110\044\111\046\112\050" +
    "\120\001\002\000\016\005\ufff7\014\ufff7\041\ufff7\044\ufff7" +
    "\046\ufff7\050\ufff7\001\002\000\004\011\164\001\002\000" +
    "\010\011\uffc7\021\153\031\uffd3\001\002\000\004\031\161" +
    "\001\002\000\004\005\123\001\002\000\004\011\122\001" +
    "\002\000\016\005\uffdb\014\uffdb\041\uffdb\044\uffdb\046\uffdb" +
    "\050\uffdb\001\002\000\004\031\124\001\002\000\014\005" +
    "\126\006\035\007\036\010\033\021\131\001\002\000\050" +
    "\011\uffd1\015\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\032\uffd1\033\uffd1\042\uffd1\045\uffd1" +
    "\051\uffd1\052\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\001" +
    "\002\000\052\011\uffc7\015\uffc7\021\153\022\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\032\uffc7\033" +
    "\uffc7\042\uffc7\045\uffc7\051\uffc7\052\uffc7\054\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\001\002\000\020\023\134\024\140\025" +
    "\142\026\135\027\136\051\145\052\144\001\002\000\050" +
    "\011\uffca\015\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\032\uffca\033\uffca\042\uffca\045\uffca" +
    "\051\uffca\052\uffca\054\uffca\055\uffca\056\uffca\057\uffca\001" +
    "\002\000\014\005\126\006\035\007\036\010\033\021\131" +
    "\001\002\000\016\022\137\023\134\024\140\025\142\026" +
    "\135\027\136\001\002\000\014\005\126\006\035\007\036" +
    "\010\033\021\131\001\002\000\014\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\021\uffcf\001\002\000\014\005\uffcc\006\uffcc" +
    "\007\uffcc\010\uffcc\021\uffcc\001\002\000\014\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\021\uffcb\001\002\000\050\011\uffc9" +
    "\015\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\032\uffc9\033\uffc9\042\uffc9\045\uffc9\051\uffc9" +
    "\052\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\001\002\000" +
    "\014\005\uffce\006\uffce\007\uffce\010\uffce\021\uffce\001\002" +
    "\000\014\005\uffd0\006\uffd0\007\uffd0\010\uffd0\021\uffd0\001" +
    "\002\000\014\005\uffcd\006\uffcd\007\uffcd\010\uffcd\021\uffcd" +
    "\001\002\000\050\011\uffd2\015\uffd2\022\uffd2\023\134\024" +
    "\140\025\142\026\135\027\136\030\uffd2\032\uffd2\033\uffd2" +
    "\042\uffd2\045\uffd2\051\uffd2\052\uffd2\054\uffd2\055\uffd2\056" +
    "\uffd2\057\uffd2\001\002\000\014\005\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\021\uffd6\001\002\000\014\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\021\uffd5\001\002\000\014\005\126\006\035" +
    "\007\036\010\033\021\131\001\002\000\016\023\134\024" +
    "\140\025\142\026\135\027\136\045\150\001\002\000\014" +
    "\013\ufffe\016\ufffe\017\ufffe\035\ufffe\036\ufffe\001\002\000" +
    "\016\005\uffd7\014\uffd7\041\uffd7\044\uffd7\046\uffd7\050\uffd7" +
    "\001\002\000\050\011\uffc8\015\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\032\uffc8\033\uffc8" +
    "\042\uffc8\045\uffc8\051\uffc8\052\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\001\002\000\014\005\126\006\035\007\036" +
    "\010\033\021\131\001\002\000\020\022\uffc5\023\134\024" +
    "\140\025\142\026\135\027\136\030\157\001\002\000\004" +
    "\022\156\001\002\000\050\011\uffc6\015\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\032\uffc6" +
    "\033\uffc6\042\uffc6\045\uffc6\051\uffc6\052\uffc6\054\uffc6\055" +
    "\uffc6\056\uffc6\057\uffc6\001\002\000\014\005\126\006\035" +
    "\007\036\010\033\021\131\001\002\000\004\022\uffc4\001" +
    "\002\000\014\005\126\006\035\007\036\010\033\021\131" +
    "\001\002\000\016\011\uffd4\023\134\024\140\025\142\026" +
    "\135\027\136\001\002\000\004\011\uffc3\001\002\000\016" +
    "\005\uffdc\014\uffdc\041\uffdc\044\uffdc\046\uffdc\050\uffdc\001" +
    "\002\000\004\014\167\001\002\000\016\005\ufff6\014\ufff6" +
    "\041\ufff6\044\ufff6\046\ufff6\050\ufff6\001\002\000\026\005" +
    "\ufffa\011\ufffa\012\ufffa\014\ufffa\041\ufffa\043\ufffa\044\ufffa" +
    "\046\ufffa\047\ufffa\050\ufffa\001\002\000\004\047\171\001" +
    "\002\000\016\005\126\006\035\007\036\010\033\021\173" +
    "\053\175\001\002\000\014\011\uffc1\032\uffc1\033\uffc1\042" +
    "\uffc1\045\uffc1\001\002\000\014\005\126\006\035\007\036" +
    "\010\033\021\131\001\002\000\026\015\212\023\134\024" +
    "\140\025\142\026\135\027\136\054\206\055\211\056\207" +
    "\057\205\001\002\000\016\005\126\006\035\007\036\010" +
    "\033\021\173\053\175\001\002\000\010\011\202\032\177" +
    "\033\201\001\002\000\016\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\021\uffbf\053\uffbf\001\002\000\016\005\126\006\035" +
    "\007\036\010\033\021\173\053\175\001\002\000\016\005" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\021\uffc0\053\uffc0\001\002" +
    "\000\016\005\uffd8\014\uffd8\041\uffd8\044\uffd8\046\uffd8\050" +
    "\uffd8\001\002\000\014\011\uffc2\032\177\033\201\042\uffc2" +
    "\045\uffc2\001\002\000\014\011\uffbc\032\uffbc\033\uffbc\042" +
    "\uffbc\045\uffbc\001\002\000\014\005\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\021\uffb8\001\002\000\014\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\021\uffbb\001\002\000\014\005\uffb9\006\uffb9" +
    "\007\uffb9\010\uffb9\021\uffb9\001\002\000\014\005\126\006" +
    "\035\007\036\010\033\021\131\001\002\000\014\005\uffba" +
    "\006\uffba\007\uffba\010\uffba\021\uffba\001\002\000\014\005" +
    "\uffb7\006\uffb7\007\uffb7\010\uffb7\021\uffb7\001\002\000\026" +
    "\011\uffbe\023\134\024\140\025\142\026\135\027\136\032" +
    "\uffbe\033\uffbe\042\uffbe\045\uffbe\001\002\000\016\022\215" +
    "\023\134\024\140\025\142\026\135\027\136\001\002\000" +
    "\040\011\uffbd\015\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\032\uffbd\033\uffbd\042\uffbd\045\uffbd\054\uffc9\055" +
    "\uffc9\056\uffc9\057\uffc9\001\002\000\010\032\177\033\201" +
    "\045\217\001\002\000\014\013\ufffe\016\ufffe\017\ufffe\035" +
    "\ufffe\036\ufffe\001\002\000\016\005\uffd9\014\uffd9\041\uffd9" +
    "\044\uffd9\046\uffd9\050\uffd9\001\002\000\010\032\177\033" +
    "\201\042\222\001\002\000\014\013\ufffe\016\ufffe\017\ufffe" +
    "\035\ufffe\036\ufffe\001\002\000\004\043\224\001\002\000" +
    "\014\013\ufffe\016\ufffe\017\ufffe\035\ufffe\036\ufffe\001\002" +
    "\000\016\005\uffda\014\uffda\041\uffda\044\uffda\046\uffda\050" +
    "\uffda\001\002\000\004\002\001\001\002\000\004\011\230" +
    "\001\002\000\014\012\ufff9\016\ufff9\017\ufff9\035\ufff9\036" +
    "\ufff9\001\002\000\014\012\232\016\020\017\017\035\022" +
    "\036\021\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\011\041\010\001\001\000\004\004\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\014\007\024" +
    "\012\025\015\022\016\023\042\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\044\014\042\001\001\000\004\010\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\046\001\001\000\002\001\001" +
    "\000\004\021\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\054\001\001\000\002" +
    "\001\001\000\004\021\056\001\001\000\002\001\001\000" +
    "\004\045\060\001\001\000\004\017\061\001\001\000\002" +
    "\001\001\000\006\014\063\020\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\067" +
    "\001\001\000\002\001\001\000\006\014\063\020\071\001" +
    "\001\000\002\001\001\000\006\003\073\041\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\076\001" +
    "\001\000\004\017\077\001\001\000\002\001\001\000\004" +
    "\021\101\001\001\000\002\001\001\000\006\003\103\041" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\106\001\001\000\014\005\112\022\113\024\114\025" +
    "\116\034\120\001\001\000\014\011\127\026\173\031\124" +
    "\035\220\037\171\001\001\000\014\011\127\026\173\031" +
    "\124\035\215\037\171\001\001\000\006\003\167\041\010" +
    "\001\001\000\014\022\165\024\114\025\116\034\120\044" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\127\026\126\031\124\001\001\000\002\001\001\000" +
    "\004\032\151\001\001\000\010\023\145\027\132\030\140" +
    "\001\001\000\002\001\001\000\010\011\127\026\131\031" +
    "\124\001\001\000\006\027\132\030\140\001\001\000\010" +
    "\011\127\026\142\031\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\132\030\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\127\026\146\031\124\001\001\000\006\027" +
    "\132\030\140\001\001\000\006\003\150\041\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\127\026" +
    "\153\031\124\033\154\001\001\000\006\027\132\030\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\127\026\153\031\124\033\157\001\001\000\002\001\001" +
    "\000\010\011\127\026\161\031\124\001\001\000\006\027" +
    "\132\030\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\011\127\026\173\031\124\035\175" +
    "\037\171\001\001\000\002\001\001\000\010\011\127\026" +
    "\213\031\124\001\001\000\010\027\132\030\140\040\207" +
    "\001\001\000\012\011\127\026\173\031\124\037\203\001" +
    "\001\000\004\036\177\001\001\000\002\001\001\000\014" +
    "\011\127\026\173\031\124\035\202\037\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\127\026\212\031\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\132\030" +
    "\140\001\001\000\006\027\132\030\140\001\001\000\002" +
    "\001\001\000\004\036\177\001\001\000\006\003\217\041" +
    "\010\001\001\000\002\001\001\000\004\036\177\001\001" +
    "\000\006\003\222\041\010\001\001\000\002\001\001\000" +
    "\006\003\224\041\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\230\001\001\000" +
    "\014\006\014\007\024\012\025\015\022\016\023\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(String string, Symbol s){
		System.out.println(string + "Error localizado antes de: Linea "+s.left+" Columna "+s.right); 
	}
	public void unrecovered_syntax_error(String string, Symbol s){ 
                System.out.println("ERROR FATAL: " + string + "Error localizado antes de: Linea "+s.left+" Columna "+s.right); 
        }	
        ArrayList<String> var = new ArrayList<String>();
        ArrayList<String> fun = new ArrayList<String>();
        int nivel = 0;
        int nivelCab = 0;
        String funAct = "";
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PRG ::= program_ identifier puntoComa BLQ punto 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        
        RESULT = b.cab + "void main (void) \n{\n" + b.valor + b.cierre;
        System.out.println(""+RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRG ::= unit_ identifier puntoComa DCLLIST punto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Blq RESULT =null;
nivelCab++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Blq RESULT =(Blq) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
nivelCab--;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Blq RESULT =(Blq) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
nivel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$3 ::= 
            {
              Blq RESULT =(Blq) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentList sList = (SentList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
nivel--;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLQ ::= NT$0 DCLLIST NT$1 begin_ NT$2 SENTLIST NT$3 end_ 
            {
              Blq RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Blq) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SentList sList = (SentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = new Blq();
        RESULT.cab = dList.valor;
        RESULT.apertura = "\n{ \n";           
        RESULT.cierre = "} \n";
        RESULT.valor = sList.valor;
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DCLLIST ::= 
            {
              DcList RESULT =null;
		
        RESULT = new DcList();
        RESULT.valor = "";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DCLLIST ::= DCLLIST DCL 
            {
              DcList RESULT =null;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        RESULT = new DcList();
        RESULT.valor = dList.valor + d.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTLIST ::= SENT 
            {
              SentList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sent s = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new SentList();
        RESULT.valor = s.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTLIST ::= SENTLIST SENT 
            {
              SentList RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentList sList = (SentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sent s = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new SentList();
        RESULT.valor = sList.valor + s.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DCL ::= DEFCTE 
            {
              Def RESULT =null;
		int dCteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dCteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefCte dCte = (DefCte)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dCte.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DCL ::= DEFVAR 
            {
              Def RESULT =null;
		int dVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefVar dVar = (DefVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dVar.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DCL ::= DEFPROC 
            {
              Def RESULT =null;
		int dProcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dProcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefProc dProc = (DefProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dProc.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DCL ::= DEFFUN 
            {
              Def RESULT =null;
		int dFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefFun dFun = (DefFun)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dFun.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DEFCTE ::= const_ CTELIST 
            {
              DefCte RESULT =null;
		int cListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CteList cList = (CteList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new DefCte();
        RESULT.valor = cList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CTELIST ::= identifier igual SIMPVALUE puntoComa 
            {
              CteList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Constantes sv = (Constantes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new CteList();
        RESULT.valor = "#define " + id + " " + sv.valor +"\n";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CTELIST ::= CTELIST identifier igual SIMPVALUE puntoComa 
            {
              CteList RESULT =null;
		int cListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CteList cList = (CteList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Constantes sv = (Constantes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new CteList();
        RESULT.valor = cList.valor + "#define " + id + " " + sv.valor + "\n"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SIMPVALUE ::= numeric_integer_const 
            {
              Constantes RESULT =null;
		int nicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nic = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Constantes();
        RESULT.valor = nic;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SIMPVALUE ::= numeric_real_const 
            {
              Constantes RESULT =null;
		int nrcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nrcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nrc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Constantes();
        RESULT.valor = nrc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SIMPVALUE ::= string_const 
            {
              Constantes RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Constantes();
        RESULT.valor = sc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DEFVAR ::= var_ DEFVARLIST puntoComa 
            {
              DefVar RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dvListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefVarList dvList = (DefVarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new DefVar();
        RESULT.valor = dvList.cab + " " + dvList.valor + ";\n" ;
        for(int k = 0;k<nivelCab-1;k++)
        {
            RESULT.valor = "\t" + RESULT.valor;
        }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DEFVARLIST ::= VARLIST dosPuntos TBAS 
            {
              DefVarList RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new DefVarList();
        RESULT.valor = vList.valor;
        RESULT.cab = t.valor;
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFVARLIST ::= DEFVARLIST puntoComa VARLIST dosPuntos TBAS 
            {
              DefVarList RESULT =null;
		int dvListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dvListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DefVarList dvList = (DefVarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new DefVarList();
        RESULT.valor = dvList.valor + ";\n";
        for(int k = 0;k<nivelCab-1;k++)
        {
            RESULT.valor = RESULT.valor + "\t" ;
        }
        RESULT.valor = RESULT.valor + t.valor+ " " + vList.valor;
        RESULT.cab = dvList.cab;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARLIST ::= identifier 
            {
              VarList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new VarList();
        RESULT.valor = id;
        RESULT.max = 1;
        RESULT.lista[0] = id;
        var.add(id);
 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VARLIST ::= identifier coma VARLIST 
            {
              VarList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new VarList();
        RESULT.valor = id + ", " + vList.valor; // para cuando no es una funcion
        for(int i =0; i<vList.max;i++)
        {
            RESULT.lista[i] = vList.lista[i];
        }
        RESULT.lista[vList.max]= id;
        RESULT.max = vList.max +1;
        var.add(id);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$4 ::= 
            {
              DefProc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
funAct="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEFPROC ::= procedure_ identifier NT$4 FORMAL_PARAMLIST puntoComa BLQ puntoComa 
            {
              DefProc RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (DefProc) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FormalParamList fpList = (FormalParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new DefProc();
        funAct="";
        RESULT.valor =  "void " + id + fpList.valor + b.apertura +b.cab + b.valor  + b.cierre;
        fun.add(id);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              DefFun RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
fun.add(id);funAct=id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DEFFUN ::= function_ identifier NT$5 FORMAL_PARAMLIST dosPuntos TBAS puntoComa BLQ puntoComa 
            {
              DefFun RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (DefFun) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FormalParamList fp = (FormalParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new DefFun();
        funAct = "";
        RESULT.valor =  t.valor +" "+ id +" "+ fp.valor  + b.apertura + b.cab + b.valor + b.cierre;
        fun.add(id);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FORMAL_PARAMLIST ::= 
            {
              FormalParamList RESULT =null;
		
        RESULT = new FormalParamList();
        RESULT.valor = "( void )";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FORMAL_PARAMLIST ::= abrirPar FORMAL_PARAM cerrarPar 
            {
              FormalParamList RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalParam fp = (FormalParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new FormalParamList();
        RESULT.valor = "("+fp.valor+")";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS 
            {
              FormalParam RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new FormalParam();
        RESULT.valor = t.valor + " " + vList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS puntoComa FORMAL_PARAM 
            {
              FormalParam RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalParam fp = (FormalParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new FormalParam();
        //RESULT.valor = t.valor +" "+ vList.valor + ", " + fp.valor;
        for (int i=vList.max;i>0;i--)
        {
            RESULT.valor = RESULT.valor + t.valor+" "+vList.lista[i-1]+", ";
        }
        RESULT.valor = RESULT.valor + " " + fp.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TBAS ::= int_ 
            {
              Tipo RESULT =null;
		
        RESULT = new Tipo();
        RESULT.valor = "int";        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TBAS ::= real_ 
            {
              Tipo RESULT =null;
		
        RESULT = new Tipo();
        RESULT.valor = "float";        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENT ::= ASIG puntoComa 
            {
              Sent RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asig a = (Asig)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Sent();
        RESULT.valor = a.valor + "; \n";
        for(int m=0;m<nivel;m++)
        {
            RESULT.valor = "\t" + RESULT.valor;
        }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENT ::= PROC_CALL puntoComa 
            {
              Sent RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcCall pc = (ProcCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Sent();
        RESULT.valor = pc.valor + "; \n" ;
        for(int j=0;j<nivel;j++)
        {
            RESULT.valor = "\t" + RESULT.valor;
        }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENT ::= if_ EXPCOND then_ BLQ else_ BLQ 
            {
              Sent RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Blq b1 = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Blq b2 = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Sent();
        RESULT.valor = "if(" + ec.valor + ")\n" + b1.apertura + b1.cab + b1.valor + b1.cierre + "else\n" + b2.apertura + b2.cab + b2.valor + b2.cierre;  

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENT ::= while_ EXPCOND do_ BLQ 
            {
              Sent RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENT ::= repeat_ BLQ until_ EXPCOND puntoComa 
            {
              Sent RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENT ::= for_ identifier puntosIgual EXP INC EXP do_ BLQ 
            {
              Sent RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INC ::= to_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INC ::= downto_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIG ::= ID puntosIgual EXP 
            {
              Asig RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Asig();
        if(id.valor.equals(funAct))
            RESULT.valor = "return " + e.valor;
        else
            RESULT.valor = id.valor + " = " + e.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ID ::= identifier 
            {
              Id RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new Id();
        RESULT.valor=id;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= EXP OP EXP 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Op o = (Op)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Exp();
        RESULT.valor = e1.valor + o.valor + e2.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= FACTOR 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Exp();
        RESULT.valor = f.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP ::= OPARIT 
            {
              Op RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operadores op = (Operadores)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Op();
        RESULT.valor = op.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPARIT ::= mas_ 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "+ ";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPARIT ::= menos 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "- ";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPARIT ::= mul 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "* ";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPARIT ::= div_ 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "/ ";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPARIT ::= mod_ 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "% "; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FACTOR ::= SIMPVALUE 
            {
              Factor RESULT =null;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constantes sv = (Constantes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new Factor();
        RESULT.valor= sv.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FACTOR ::= abrirPar EXP cerrarPar 
            {
              Factor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT=new Factor();
        RESULT.valor = "(" + e.valor + ")"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FACTOR ::= identifier SUBPPARAMLIST 
            {
              Factor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SubPparamList subList = (SubPparamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new Factor();
        if (subList.valor == "")
        {
            if(fun.contains(id))
                RESULT.valor = id + "()";
            else
                RESULT.valor = id;
        }
        else
            RESULT.valor = id + subList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SUBPPARAMLIST ::= 
            {
              SubPparamList RESULT =null;
		
        RESULT = new SubPparamList();
        RESULT.valor = "";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SUBPPARAMLIST ::= abrirPar EXPLIST cerrarPar 
            {
              SubPparamList RESULT =null;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList eList = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new SubPparamList();
        RESULT.valor = "(" + eList.valor + ")";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPLIST ::= EXP 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ExpList();
        RESULT.valor = e.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPLIST ::= EXP coma EXPLIST 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList eList = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ExpList();
        RESULT.valor = e.valor + ", " + eList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PROC_CALL ::= identifier SUBPPARAMLIST 
            {
              ProcCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SubPparamList subList = (SubPparamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ProcCall();
        if (subList.valor == "")
        {
            if(fun.contains(id))
                RESULT.valor = id + "()";
            else
                RESULT.valor = id;
        }
        else
            RESULT.valor = id + subList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPCOND ::= EXPCOND OPLOG EXPCOND 
            {
              Object RESULT =null;
		int ec1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ec1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ec1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oplogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oplogright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oplog = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ec2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ec2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ec2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new ExpCond();
        RESULT.valor = ec1.valor +" "+ oplog.valor +" "+ ec2.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPCOND ::= FACTORCOND 
            {
              Object RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new ExpCond();
        RESULT.valor = fc.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPLOG ::= or_ 
            {
              Object RESULT =null;
		
        RESULT=new OpLog();
        RESULT.valor = "||";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPLOG ::= and_ 
            {
              Object RESULT =null;
		
        RESULT=new OpLog();
        RESULT.valor = "&&";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FACTORCOND ::= EXP OPCOMP EXP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new FactorCond();
        RESULT.valor = e1.valor +" "+ oc.valor+" "+e2.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FACTORCOND ::= abrirPar EXP cerrarPar 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT=new FactorCond();
        RESULT.valor = "("+e.valor+")";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FACTORCOND ::= not_ FACTORCOND 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new FactorCond();
        RESULT.valor = "!"+f.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPCOMP ::= menor 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new OpComp();
        RESULT.valor = "<";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPCOMP ::= mayor 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new OpComp();
        RESULT.valor = ">";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPCOMP ::= menorIgual 
            {
              Object RESULT =null;
		int mileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int miright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new OpComp();
        RESULT.valor = "<=";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPCOMP ::= mayorIgual 
            {
              Object RESULT =null;
		int maileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mairight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mai = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new OpComp();
        RESULT.valor = ">=";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPCOMP ::= igual 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new OpComp();
        RESULT.valor = "=";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
