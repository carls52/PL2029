
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package traductorpascalc;

import java_cup.runtime.*;
import java.util.Map.Entry;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\007\000\002\002" +
    "\007\000\002\003\006\000\002\004\002\000\002\004\004" +
    "\000\002\005\003\000\002\005\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\007\004\000\002\010\006\000\002\010\007\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\005" +
    "\000\002\013\005\000\002\013\007\000\002\014\003\000" +
    "\002\014\005\000\002\015\010\000\002\016\012\000\002" +
    "\017\002\000\002\017\005\000\002\020\005\000\002\020" +
    "\007\000\002\021\003\000\002\021\003\000\002\022\004" +
    "\000\002\022\004\000\002\022\010\000\002\022\006\000" +
    "\002\022\007\000\002\022\012\000\002\023\003\000\002" +
    "\023\003\000\002\024\005\000\002\025\003\000\002\026" +
    "\005\000\002\026\003\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\031\003\000\002\031\005\000\002" +
    "\031\004\000\002\032\002\000\002\032\005\000\002\033" +
    "\003\000\002\033\005\000\002\034\004\000\002\035\005" +
    "\000\002\035\003\000\002\036\003\000\002\036\003\000" +
    "\002\037\005\000\002\037\005\000\002\037\004\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\006\004\006\034\004\001\002\000\004\005" +
    "\221\001\002\000\004\002\220\001\002\000\004\005\007" +
    "\001\002\000\004\011\010\001\002\000\014\013\ufffd\016" +
    "\ufffd\017\ufffd\035\ufffd\036\ufffd\001\002\000\014\013\024" +
    "\016\016\017\015\035\020\036\017\001\002\000\004\012" +
    "\013\001\002\000\004\002\000\001\002\000\016\012\ufffc" +
    "\013\ufffc\016\ufffc\017\ufffc\035\ufffc\036\ufffc\001\002\000" +
    "\004\005\211\001\002\000\004\005\174\001\002\000\004" +
    "\005\160\001\002\000\004\005\146\001\002\000\016\012" +
    "\ufff7\013\ufff7\016\ufff7\017\ufff7\035\ufff7\036\ufff7\001\002" +
    "\000\016\012\ufff6\013\ufff6\016\ufff6\017\ufff6\035\ufff6\036" +
    "\ufff6\001\002\000\016\012\ufff9\013\ufff9\016\ufff9\017\ufff9" +
    "\035\ufff9\036\ufff9\001\002\000\014\005\034\041\026\044" +
    "\027\046\030\050\036\001\002\000\016\012\ufff8\013\ufff8" +
    "\016\ufff8\017\ufff8\035\ufff8\036\ufff8\001\002\000\016\005" +
    "\044\006\050\007\052\010\045\021\113\053\115\001\002" +
    "\000\016\005\044\006\050\007\052\010\045\021\113\053" +
    "\115\001\002\000\014\013\ufffd\016\ufffd\017\ufffd\035\ufffd" +
    "\036\ufffd\001\002\000\016\005\034\014\107\041\026\044" +
    "\027\046\030\050\036\001\002\000\016\005\ufffb\014\ufffb" +
    "\041\ufffb\044\ufffb\046\ufffb\050\ufffb\001\002\000\004\011" +
    "\105\001\002\000\010\011\uffcd\021\074\031\uffd9\001\002" +
    "\000\004\031\102\001\002\000\004\005\041\001\002\000" +
    "\004\011\040\001\002\000\016\005\uffe1\014\uffe1\041\uffe1" +
    "\044\uffe1\046\uffe1\050\uffe1\001\002\000\004\031\042\001" +
    "\002\000\014\005\044\006\050\007\052\010\045\021\051" +
    "\001\002\000\050\011\uffd7\015\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\032\uffd7\033\uffd7" +
    "\042\uffd7\045\uffd7\051\uffd7\052\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\001\002\000\052\011\uffcd\015\uffcd\021\074" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\032\uffcd\033\uffcd\042\uffcd\045\uffcd\051\uffcd\052\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\057\uffcd\001\002\000\050\011" +
    "\ufff0\015\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\032\ufff0\033\ufff0\042\ufff0\045\ufff0\051" +
    "\ufff0\052\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\001\002" +
    "\000\020\023\055\024\061\025\063\026\056\027\057\051" +
    "\066\052\065\001\002\000\050\011\uffd0\015\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\032" +
    "\uffd0\033\uffd0\042\uffd0\045\uffd0\051\uffd0\052\uffd0\054\uffd0" +
    "\055\uffd0\056\uffd0\057\uffd0\001\002\000\050\011\ufff2\015" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2" +
    "\030\ufff2\032\ufff2\033\ufff2\042\ufff2\045\ufff2\051\ufff2\052" +
    "\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\001\002\000\014" +
    "\005\044\006\050\007\052\010\045\021\051\001\002\000" +
    "\050\011\ufff1\015\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\032\ufff1\033\ufff1\042\ufff1\045" +
    "\ufff1\051\ufff1\052\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1" +
    "\001\002\000\016\022\060\023\055\024\061\025\063\026" +
    "\056\027\057\001\002\000\014\005\044\006\050\007\052" +
    "\010\045\021\051\001\002\000\014\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\021\uffd5\001\002\000\014\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\021\uffd2\001\002\000\014\005\uffd1\006" +
    "\uffd1\007\uffd1\010\uffd1\021\uffd1\001\002\000\050\011\uffcf" +
    "\015\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\032\uffcf\033\uffcf\042\uffcf\045\uffcf\051\uffcf" +
    "\052\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\001\002\000" +
    "\014\005\uffd4\006\uffd4\007\uffd4\010\uffd4\021\uffd4\001\002" +
    "\000\014\005\uffd6\006\uffd6\007\uffd6\010\uffd6\021\uffd6\001" +
    "\002\000\014\005\uffd3\006\uffd3\007\uffd3\010\uffd3\021\uffd3" +
    "\001\002\000\050\011\uffd8\015\uffd8\022\uffd8\023\055\024" +
    "\061\025\063\026\056\027\057\030\uffd8\032\uffd8\033\uffd8" +
    "\042\uffd8\045\uffd8\051\uffd8\052\uffd8\054\uffd8\055\uffd8\056" +
    "\uffd8\057\uffd8\001\002\000\014\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\021\uffdc\001\002\000\014\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\021\uffdb\001\002\000\014\005\044\006\050" +
    "\007\052\010\045\021\051\001\002\000\016\023\055\024" +
    "\061\025\063\026\056\027\057\045\071\001\002\000\014" +
    "\013\ufffd\016\ufffd\017\ufffd\035\ufffd\036\ufffd\001\002\000" +
    "\016\005\uffdd\014\uffdd\041\uffdd\044\uffdd\046\uffdd\050\uffdd" +
    "\001\002\000\050\011\uffce\015\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\027\uffce\030\uffce\032\uffce\033\uffce" +
    "\042\uffce\045\uffce\051\uffce\052\uffce\054\uffce\055\uffce\056" +
    "\uffce\057\uffce\001\002\000\014\005\044\006\050\007\052" +
    "\010\045\021\051\001\002\000\020\022\uffcb\023\055\024" +
    "\061\025\063\026\056\027\057\030\100\001\002\000\004" +
    "\022\077\001\002\000\050\011\uffcc\015\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\032\uffcc" +
    "\033\uffcc\042\uffcc\045\uffcc\051\uffcc\052\uffcc\054\uffcc\055" +
    "\uffcc\056\uffcc\057\uffcc\001\002\000\014\005\044\006\050" +
    "\007\052\010\045\021\051\001\002\000\004\022\uffca\001" +
    "\002\000\014\005\044\006\050\007\052\010\045\021\051" +
    "\001\002\000\016\011\uffda\023\055\024\061\025\063\026" +
    "\056\027\057\001\002\000\004\011\uffc9\001\002\000\016" +
    "\005\uffe2\014\uffe2\041\uffe2\044\uffe2\046\uffe2\050\uffe2\001" +
    "\002\000\016\005\ufffa\014\ufffa\041\ufffa\044\ufffa\046\ufffa" +
    "\050\ufffa\001\002\000\026\005\ufffe\011\ufffe\012\ufffe\014" +
    "\ufffe\041\ufffe\043\ufffe\044\ufffe\046\ufffe\047\ufffe\050\ufffe" +
    "\001\002\000\004\047\111\001\002\000\016\005\044\006" +
    "\050\007\052\010\045\021\113\053\115\001\002\000\014" +
    "\011\uffc7\032\uffc7\033\uffc7\042\uffc7\045\uffc7\001\002\000" +
    "\014\005\044\006\050\007\052\010\045\021\051\001\002" +
    "\000\026\015\132\023\055\024\061\025\063\026\056\027" +
    "\057\054\126\055\131\056\127\057\125\001\002\000\016" +
    "\005\044\006\050\007\052\010\045\021\113\053\115\001" +
    "\002\000\010\011\122\032\117\033\121\001\002\000\016" +
    "\005\uffc5\006\uffc5\007\uffc5\010\uffc5\021\uffc5\053\uffc5\001" +
    "\002\000\016\005\044\006\050\007\052\010\045\021\113" +
    "\053\115\001\002\000\016\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\021\uffc6\053\uffc6\001\002\000\016\005\uffde\014\uffde" +
    "\041\uffde\044\uffde\046\uffde\050\uffde\001\002\000\014\011" +
    "\uffc8\032\117\033\121\042\uffc8\045\uffc8\001\002\000\014" +
    "\011\uffc2\032\uffc2\033\uffc2\042\uffc2\045\uffc2\001\002\000" +
    "\014\005\uffbe\006\uffbe\007\uffbe\010\uffbe\021\uffbe\001\002" +
    "\000\014\005\uffc1\006\uffc1\007\uffc1\010\uffc1\021\uffc1\001" +
    "\002\000\014\005\uffbf\006\uffbf\007\uffbf\010\uffbf\021\uffbf" +
    "\001\002\000\014\005\044\006\050\007\052\010\045\021" +
    "\051\001\002\000\014\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\021\uffc0\001\002\000\014\005\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\021\uffbd\001\002\000\026\011\uffc4\023\055\024\061" +
    "\025\063\026\056\027\057\032\uffc4\033\uffc4\042\uffc4\045" +
    "\uffc4\001\002\000\016\022\135\023\055\024\061\025\063" +
    "\026\056\027\057\001\002\000\040\011\uffc3\015\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\032\uffc3\033\uffc3" +
    "\042\uffc3\045\uffc3\054\uffcf\055\uffcf\056\uffcf\057\uffcf\001" +
    "\002\000\010\032\117\033\121\045\137\001\002\000\014" +
    "\013\ufffd\016\ufffd\017\ufffd\035\ufffd\036\ufffd\001\002\000" +
    "\016\005\uffdf\014\uffdf\041\uffdf\044\uffdf\046\uffdf\050\uffdf" +
    "\001\002\000\010\032\117\033\121\042\142\001\002\000" +
    "\014\013\ufffd\016\ufffd\017\ufffd\035\ufffd\036\ufffd\001\002" +
    "\000\004\043\144\001\002\000\014\013\ufffd\016\ufffd\017" +
    "\ufffd\035\ufffd\036\ufffd\001\002\000\016\005\uffe0\014\uffe0" +
    "\041\uffe0\044\uffe0\046\uffe0\050\uffe0\001\002\000\004\015" +
    "\154\001\002\000\020\005\150\012\ufff5\013\ufff5\016\ufff5" +
    "\017\ufff5\035\ufff5\036\ufff5\001\002\000\004\015\151\001" +
    "\002\000\010\006\050\007\052\010\045\001\002\000\004" +
    "\011\153\001\002\000\020\005\ufff3\012\ufff3\013\ufff3\016" +
    "\ufff3\017\ufff3\035\ufff3\036\ufff3\001\002\000\010\006\050" +
    "\007\052\010\045\001\002\000\004\011\156\001\002\000" +
    "\020\005\ufff4\012\ufff4\013\ufff4\016\ufff4\017\ufff4\035\ufff4" +
    "\036\ufff4\001\002\000\004\020\172\001\002\000\006\020" +
    "\uffec\030\170\001\002\000\004\011\162\001\002\000\020" +
    "\005\160\012\uffef\013\uffef\016\uffef\017\uffef\035\uffef\036" +
    "\uffef\001\002\000\004\020\164\001\002\000\006\037\167" +
    "\040\166\001\002\000\004\011\uffed\001\002\000\006\011" +
    "\uffe3\022\uffe3\001\002\000\006\011\uffe4\022\uffe4\001\002" +
    "\000\004\005\160\001\002\000\004\020\uffeb\001\002\000" +
    "\006\037\167\040\166\001\002\000\004\011\uffee\001\002" +
    "\000\006\011\uffe8\021\176\001\002\000\004\011\206\001" +
    "\002\000\004\005\160\001\002\000\004\022\205\001\002" +
    "\000\004\020\201\001\002\000\006\037\167\040\166\001" +
    "\002\000\006\011\203\022\uffe6\001\002\000\004\005\160" +
    "\001\002\000\004\022\uffe5\001\002\000\006\011\uffe7\020" +
    "\uffe7\001\002\000\014\013\ufffd\016\ufffd\017\ufffd\035\ufffd" +
    "\036\ufffd\001\002\000\004\011\210\001\002\000\016\012" +
    "\uffea\013\uffea\016\uffea\017\uffea\035\uffea\036\uffea\001\002" +
    "\000\006\020\uffe8\021\176\001\002\000\004\020\213\001" +
    "\002\000\006\037\167\040\166\001\002\000\004\011\215" +
    "\001\002\000\014\013\ufffd\016\ufffd\017\ufffd\035\ufffd\036" +
    "\ufffd\001\002\000\004\011\217\001\002\000\016\012\uffe9" +
    "\013\uffe9\016\uffe9\017\uffe9\035\uffe9\036\uffe9\001\002\000" +
    "\004\002\001\001\002\000\004\011\222\001\002\000\014" +
    "\012\ufffd\016\ufffd\017\ufffd\035\ufffd\036\ufffd\001\002\000" +
    "\014\012\224\016\016\017\015\035\020\036\017\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\011\004\010\001\001\000\014\006\013\007\022\012" +
    "\024\015\020\016\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\160\014\156\001\001\000\004\010\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\030\022\031\024\032\025\034\034\036" +
    "\001\001\000\002\001\001\000\014\011\046\026\113\031" +
    "\042\035\140\037\111\001\001\000\014\011\046\026\113" +
    "\031\042\035\135\037\111\001\001\000\006\003\107\004" +
    "\010\001\001\000\012\022\105\024\032\025\034\034\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\046\026\045\031\042\001\001\000\002\001\001\000\004" +
    "\032\072\001\001\000\002\001\001\000\010\023\066\027" +
    "\053\030\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\046\026\052\031\042\001\001\000\002\001" +
    "\001\000\006\027\053\030\061\001\001\000\010\011\046" +
    "\026\063\031\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\053\030" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\046\026\067\031\042\001\001\000\006\027\053\030" +
    "\061\001\001\000\006\003\071\004\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\046\026\074\031" +
    "\042\033\075\001\001\000\006\027\053\030\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\046\026" +
    "\074\031\042\033\100\001\001\000\002\001\001\000\010" +
    "\011\046\026\102\031\042\001\001\000\006\027\053\030" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\011" +
    "\046\026\113\031\042\035\115\037\111\001\001\000\002" +
    "\001\001\000\010\011\046\026\133\031\042\001\001\000" +
    "\010\027\053\030\061\040\127\001\001\000\012\011\046" +
    "\026\113\031\042\037\123\001\001\000\004\036\117\001" +
    "\001\000\002\001\001\000\014\011\046\026\113\031\042" +
    "\035\122\037\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\046\026\132\031\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\053\030\061\001\001\000\006\027" +
    "\053\030\061\001\001\000\002\001\001\000\004\036\117" +
    "\001\001\000\006\003\137\004\010\001\001\000\002\001" +
    "\001\000\004\036\117\001\001\000\006\003\142\004\010" +
    "\001\001\000\002\001\001\000\006\003\144\004\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\162\001\001\000\002" +
    "\001\001\000\004\021\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\170\001\001" +
    "\000\002\001\001\000\004\021\172\001\001\000\002\001" +
    "\001\000\004\017\174\001\001\000\002\001\001\000\006" +
    "\014\177\020\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\201\001\001\000\002\001\001\000\006" +
    "\014\177\020\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\206\004\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\211\001\001\000\002\001" +
    "\001\000\004\021\213\001\001\000\002\001\001\000\006" +
    "\003\215\004\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\222" +
    "\001\001\000\014\006\013\007\022\012\024\015\020\016" +
    "\021\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(String string, Symbol s){
		System.out.println(string + "Error localizado antes de: Linea "+s.left+" Columna "+s.right); 
	}
	public void unrecovered_syntax_error(String string, Symbol s){ 
                System.out.println("ERROR FATAL: " + string + "Error localizado antes de: Linea "+s.left+" Columna "+s.right); 
        }	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PRG ::= program_ identifier puntoComa BLQ punto 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        
        //String res = b.cab + b.valor + "\n .";
       // RESULT = b.cab + "int main (void) {" + b.valor + b.cierre;
       // System.out.println(RESULT);
        System.out.println("funcionaAA");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRG ::= unit_ identifier puntoComa DCLLIST punto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLQ ::= DCLLIST begin_ SENTLIST end_ 
            {
              Blq RESULT =null;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Blq();
        
       // RESULT.cab = dList.valor;
       // RESULT.cierre = "}";
       // RESULT.valor = sList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DCLLIST ::= 
            {
              DcList RESULT =null;
		
        RESULT = new DcList();
        RESULT.valor = "";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DCLLIST ::= DCLLIST DCL 
            {
              DcList RESULT =null;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        RESULT = new DcList();
        RESULT.valor = dList.valor + d.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTLIST ::= SENT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sent s = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new SentList();
        RESULT.valor = s.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sent s = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new SentList();
        RESULT = sList.valor + s.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DCL ::= DEFCTE 
            {
              Def RESULT =null;
		int dCteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dCteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefCte dCte = (DefCte)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dCte.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DCL ::= DEFVAR 
            {
              Def RESULT =null;
		int dVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefVar dVar = (DefVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dVar.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCL ::= DEFPROC 
            {
              Def RESULT =null;
		int dProcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dProcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefProc dProc = (DefProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dProc.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DCL ::= DEFFUN 
            {
              Def RESULT =null;
		int dFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefFun dFun = (DefFun)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dFun.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFCTE ::= const_ CTELIST 
            {
              DefCte RESULT =null;
		int cListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CteList cList = (CteList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new DefCte();
        RESULT.valor = cList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CTELIST ::= identifier igual SIMPVALUE puntoComa 
            {
              CteList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Constantes sv = (Constantes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new CteList();
        RESULT.valor = "#define " + id + " " + sv +"; \n";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CTELIST ::= CTELIST identifier igual SIMPVALUE puntoComa 
            {
              CteList RESULT =null;
		int cListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CteList cList = (CteList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Constantes sv = (Constantes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new DefCte();
        RESULT.valor = cList.valor + "#define " + id + " " + sv + "; \n"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SIMPVALUE ::= numeric_integer_const 
            {
              Constantes RESULT =null;
		int nicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nic = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Constantes();
        RESULT.valor = nic;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SIMPVALUE ::= numeric_real_const 
            {
              Constantes RESULT =null;
		int nrcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nrcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nrc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Constantes();
        RESULT.valor = nrc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SIMPVALUE ::= string_const 
            {
              Constantes RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Constantes();
        RESULT.valor = sc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DEFVAR ::= var_ DEFVARLIST puntoComa 
            {
              DefVar RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dvListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefVarList dvList = (DefVarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Def();
        RESULT.valor = dvList.cab + " " + var + dvList.valor + ";\n" ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DEFVARLIST ::= VARLIST dosPuntos TBAS 
            {
              DefVarList RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new DefVarList();
        RESULT.valor = vList.valor;
        RESULT.cab = t.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEFVARLIST ::= DEFVARLIST puntoComa VARLIST dosPuntos TBAS 
            {
              DefVarList RESULT =null;
		int dvListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dvListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DefVarList dvList = (DefVarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new DefVarList();
        RESULT.valor = dvList.valor + ";\n" + t.valor+ " " + vList.valor ;
        RESULT.cab = dvList.cab;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VARLIST ::= identifier 
            {
              VarList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new VarList();
        RESULT.valor = id;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VARLIST ::= identifier coma VARLIST 
            {
              VarList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new VarList();
        RESULT = id + ", " + vList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DEFPROC ::= procedure_ identifier FORMAL_PARAMLIST puntoComa BLQ puntoComa 
            {
              DefProc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FormalParamList fpList = (FormalParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new DefProc();
        RESULT.valor = b.cab + "\n void " + id + fpList.valor + "\n" + b.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFFUN ::= function_ identifier FORMAL_PARAMLIST dosPuntos TBAS puntoComa BLQ puntoComa 
            {
              DefFun RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FormalParamList fp = (FormalParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new DefFun();
        RESULT = b.cab + "\n" + t.valor + id + fp.valor + b.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FORMAL_PARAMLIST ::= 
            {
              FormalParamList RESULT =null;
		
        RESULT = new FormalParamList();
        RESULT.valor = "( void )";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FORMAL_PARAMLIST ::= abrirPar FORMAL_PARAM cerrarPar 
            {
              FormalParamList RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalParam fp = (FormalParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new FormalParamList();
        RESULT.valor = "("+fp.valor+")";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS 
            {
              FormalParam RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new FormalParam();
        RESULT.valor = t.valor + " " + vList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS puntoComa FORMAL_PARAM 
            {
              FormalParam RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalParam fp = (FormalParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new FormalParam();
        RESULT.valor = t.valor + vList.valor + ", " + fp.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TBAS ::= int_ 
            {
              Tipo RESULT =null;
		
        RESULT = new Tipo();
        RESULT.valor = "int";        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TBAS ::= real_ 
            {
              Tipo RESULT =null;
		
        RESULT = new Tipo();
        RESULT.valor = "float";        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENT ::= ASIG puntoComa 
            {
              Sent RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asig a = (Asig)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Sent();
        RESULT.valor = a.valor + ": \n";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENT ::= PROC_CALL puntoComa 
            {
              Sent RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcCall pc = (ProcCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Sent();
        RESULT.valor = pc.valor + ";" ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENT ::= if_ EXPCOND then_ BLQ else_ BLQ 
            {
              Sent RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENT ::= while_ EXPCOND do_ BLQ 
            {
              Sent RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= repeat_ BLQ until_ EXPCOND puntoComa 
            {
              Sent RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT ::= for_ identifier puntosIgual EXP INC EXP do_ BLQ 
            {
              Sent RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INC ::= to_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INC ::= downto_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIG ::= ID puntosIgual EXP 
            {
              Asig RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Asig();
        RESULT = id.valor + " = " + e.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ID ::= identifier 
            {
              Id RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new Id();
        RESULT.valor="id";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= EXP OP EXP 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Op o = (Op)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Exp();
        RESULT.valor = e1.valor + o.valor + e2.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= FACTOR 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Exp();
        RESULT.valor = f.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP ::= OPARIT 
            {
              Op RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operadores op = (Operadores)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Op();
        RESULT.valor = op.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPARIT ::= mas_ 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "+";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPARIT ::= menos 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "-";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPARIT ::= mul 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "*";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPARIT ::= div_ 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "/";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPARIT ::= mod_ 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "%";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FACTOR ::= SIMPVALUE 
            {
              Factor RESULT =null;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constantes sv = (Constantes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new Factor();
        RESULT.valor= sv.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FACTOR ::= abrirPar EXP cerrarPar 
            {
              Factor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT=new Factor();
        RESULT.valor = "(" + e.valor + ")"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FACTOR ::= identifier SUBPPARAMLIST 
            {
              Factor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sublistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sublistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SupParamList sublist = (SupParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new Factor();
        RESULT.valor = id.valor + sublist.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SUBPPARAMLIST ::= 
            {
              SupParamList RESULT =null;
		
        RESULT = new SubParamList();
        RESULT.valor = "()";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SUBPPARAMLIST ::= abrirPar EXPLIST cerrarPar 
            {
              SupParamList RESULT =null;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList eList = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new SubParamList();
        RESULT.valor = "(" + eList.valor + ")";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPLIST ::= EXP 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ExpList();
        RESULT.valor = e.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPLIST ::= EXP coma EXPLIST 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList eList = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ExpList();
        RESULT.valor = e.valor + ", " + eList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PROC_CALL ::= identifier SUBPPARAMLIST 
            {
              ProcCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SupParamList subList = (SupParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ProcCall();
        RESULT.valor = id + subList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPCOND ::= EXPCOND OPLOG EXPCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPCOND ::= FACTORCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPLOG ::= or_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPLOG ::= and_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FACTORCOND ::= EXP OPCOMP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FACTORCOND ::= abrirPar EXP cerrarPar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FACTORCOND ::= not_ FACTORCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPCOMP ::= menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPCOMP ::= mayor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPCOMP ::= menorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPCOMP ::= mayorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPCOMP ::= igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
