
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package traductorpascalc;

import java_cup.runtime.*;
import java.util.Map.Entry;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\007\000\002\002" +
    "\007\000\002\002\007\000\002\002\007\000\002\041\002" +
    "\000\002\042\002\000\002\002\011\000\002\043\002\000" +
    "\002\044\002\000\002\045\002\000\002\046\002\000\002" +
    "\003\012\000\002\004\002\000\002\004\004\000\002\005" +
    "\003\000\002\005\004\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\007\004\000" +
    "\002\010\006\000\002\010\007\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\012\005\000\002\013" +
    "\005\000\002\013\007\000\002\014\003\000\002\014\005" +
    "\000\002\047\002\000\002\015\011\000\002\050\002\000" +
    "\002\016\013\000\002\017\002\000\002\017\005\000\002" +
    "\020\005\000\002\020\007\000\002\021\003\000\002\021" +
    "\003\000\002\022\004\000\002\022\004\000\002\022\010" +
    "\000\002\022\006\000\002\022\007\000\002\022\012\000" +
    "\002\023\003\000\002\023\003\000\002\024\005\000\002" +
    "\025\003\000\002\026\005\000\002\026\003\000\002\027" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\031\003\000" +
    "\002\031\005\000\002\031\004\000\002\032\002\000\002" +
    "\032\005\000\002\033\003\000\002\033\005\000\002\034" +
    "\004\000\002\035\005\000\002\035\003\000\002\036\003" +
    "\000\002\036\003\000\002\037\005\000\002\037\005\000" +
    "\002\037\004\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\010\003\006\004\007\034\004\001\002\000" +
    "\004\005\241\001\002\000\004\002\240\001\002\000\004" +
    "\005\234\001\002\000\006\003\011\005\010\001\002\000" +
    "\004\011\230\001\002\000\004\011\012\001\002\000\014" +
    "\013\ufff9\016\ufff9\017\ufff9\035\ufff9\036\ufff9\001\002\000" +
    "\014\013\ufff4\016\ufff4\017\ufff4\035\ufff4\036\ufff4\001\002" +
    "\000\004\012\015\001\002\000\004\002\uffff\001\002\000" +
    "\014\013\ufff8\016\022\017\021\035\024\036\023\001\002" +
    "\000\016\012\ufff3\013\ufff3\016\ufff3\017\ufff3\035\ufff3\036" +
    "\ufff3\001\002\000\004\013\110\001\002\000\004\005\100" +
    "\001\002\000\004\005\062\001\002\000\004\005\046\001" +
    "\002\000\004\005\031\001\002\000\016\012\uffee\013\uffee" +
    "\016\uffee\017\uffee\035\uffee\036\uffee\001\002\000\016\012" +
    "\uffed\013\uffed\016\uffed\017\uffed\035\uffed\036\uffed\001\002" +
    "\000\016\012\ufff0\013\ufff0\016\ufff0\017\ufff0\035\ufff0\036" +
    "\ufff0\001\002\000\016\012\uffef\013\uffef\016\uffef\017\uffef" +
    "\035\uffef\036\uffef\001\002\000\004\015\042\001\002\000" +
    "\020\005\033\012\uffec\013\uffec\016\uffec\017\uffec\035\uffec" +
    "\036\uffec\001\002\000\004\015\034\001\002\000\010\006" +
    "\037\007\040\010\035\001\002\000\050\011\uffe7\015\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\032\uffe7\033\uffe7\042\uffe7\045\uffe7\051\uffe7\052\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\057\uffe7\001\002\000\004\011" +
    "\041\001\002\000\050\011\uffe9\015\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\032\uffe9\033" +
    "\uffe9\042\uffe9\045\uffe9\051\uffe9\052\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\057\uffe9\001\002\000\050\011\uffe8\015\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\032\uffe8\033\uffe8\042\uffe8\045\uffe8\051\uffe8\052\uffe8\054" +
    "\uffe8\055\uffe8\056\uffe8\057\uffe8\001\002\000\020\005\uffea" +
    "\012\uffea\013\uffea\016\uffea\017\uffea\035\uffea\036\uffea\001" +
    "\002\000\010\006\037\007\040\010\035\001\002\000\004" +
    "\011\044\001\002\000\020\005\uffeb\012\uffeb\013\uffeb\016" +
    "\uffeb\017\uffeb\035\uffeb\036\uffeb\001\002\000\004\020\060" +
    "\001\002\000\006\020\uffe3\030\056\001\002\000\004\011" +
    "\050\001\002\000\020\005\046\012\uffe6\013\uffe6\016\uffe6" +
    "\017\uffe6\035\uffe6\036\uffe6\001\002\000\004\020\052\001" +
    "\002\000\006\037\055\040\054\001\002\000\004\011\uffe4" +
    "\001\002\000\006\011\uffd8\022\uffd8\001\002\000\006\011" +
    "\uffd9\022\uffd9\001\002\000\004\005\046\001\002\000\004" +
    "\020\uffe2\001\002\000\006\037\055\040\054\001\002\000" +
    "\004\011\uffe5\001\002\000\006\011\uffe1\021\uffe1\001\002" +
    "\000\006\011\uffdd\021\065\001\002\000\004\011\075\001" +
    "\002\000\004\005\046\001\002\000\004\022\074\001\002" +
    "\000\004\020\070\001\002\000\006\037\055\040\054\001" +
    "\002\000\006\011\072\022\uffdb\001\002\000\004\005\046" +
    "\001\002\000\004\022\uffda\001\002\000\006\011\uffdc\020" +
    "\uffdc\001\002\000\014\013\ufff9\016\ufff9\017\ufff9\035\ufff9" +
    "\036\ufff9\001\002\000\004\011\077\001\002\000\016\012" +
    "\uffe0\013\uffe0\016\uffe0\017\uffe0\035\uffe0\036\uffe0\001\002" +
    "\000\006\020\uffdf\021\uffdf\001\002\000\006\020\uffdd\021" +
    "\065\001\002\000\004\020\103\001\002\000\006\037\055" +
    "\040\054\001\002\000\004\011\105\001\002\000\014\013" +
    "\ufff9\016\ufff9\017\ufff9\035\ufff9\036\ufff9\001\002\000\004" +
    "\011\107\001\002\000\016\012\uffde\013\uffde\016\uffde\017" +
    "\uffde\035\uffde\036\uffde\001\002\000\014\005\ufff7\041\ufff7" +
    "\044\ufff7\046\ufff7\050\ufff7\001\002\000\014\005\120\041" +
    "\112\044\113\046\114\050\122\001\002\000\016\005\130" +
    "\006\037\007\040\010\035\021\175\053\177\001\002\000" +
    "\016\005\130\006\037\007\040\010\035\021\175\053\177" +
    "\001\002\000\014\013\ufff9\016\ufff9\017\ufff9\035\ufff9\036" +
    "\ufff9\001\002\000\016\005\120\014\ufff6\041\112\044\113" +
    "\046\114\050\122\001\002\000\016\005\ufff2\014\ufff2\041" +
    "\ufff2\044\ufff2\046\ufff2\050\ufff2\001\002\000\004\011\166" +
    "\001\002\000\010\011\uffc2\021\155\031\uffce\001\002\000" +
    "\004\031\163\001\002\000\004\005\125\001\002\000\004" +
    "\011\124\001\002\000\016\005\uffd6\014\uffd6\041\uffd6\044" +
    "\uffd6\046\uffd6\050\uffd6\001\002\000\004\031\126\001\002" +
    "\000\014\005\130\006\037\007\040\010\035\021\133\001" +
    "\002\000\050\011\uffcc\015\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\032\uffcc\033\uffcc\042" +
    "\uffcc\045\uffcc\051\uffcc\052\uffcc\054\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\001\002\000\052\011\uffc2\015\uffc2\021\155\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\032\uffc2\033\uffc2\042\uffc2\045\uffc2\051\uffc2\052\uffc2\054" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\001\002\000\020\023\136" +
    "\024\142\025\144\026\137\027\140\051\147\052\146\001" +
    "\002\000\050\011\uffc5\015\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\032\uffc5\033\uffc5\042" +
    "\uffc5\045\uffc5\051\uffc5\052\uffc5\054\uffc5\055\uffc5\056\uffc5" +
    "\057\uffc5\001\002\000\014\005\130\006\037\007\040\010" +
    "\035\021\133\001\002\000\016\022\141\023\136\024\142" +
    "\025\144\026\137\027\140\001\002\000\014\005\130\006" +
    "\037\007\040\010\035\021\133\001\002\000\014\005\uffca" +
    "\006\uffca\007\uffca\010\uffca\021\uffca\001\002\000\014\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\021\uffc7\001\002\000\014" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\021\uffc6\001\002\000" +
    "\050\011\uffc4\015\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\032\uffc4\033\uffc4\042\uffc4\045" +
    "\uffc4\051\uffc4\052\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4" +
    "\001\002\000\014\005\uffc9\006\uffc9\007\uffc9\010\uffc9\021" +
    "\uffc9\001\002\000\014\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\021\uffcb\001\002\000\014\005\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\021\uffc8\001\002\000\050\011\uffcd\015\uffcd\022\uffcd" +
    "\023\136\024\142\025\144\026\137\027\140\030\uffcd\032" +
    "\uffcd\033\uffcd\042\uffcd\045\uffcd\051\uffcd\052\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\001\002\000\014\005\uffd1\006" +
    "\uffd1\007\uffd1\010\uffd1\021\uffd1\001\002\000\014\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\021\uffd0\001\002\000\014\005" +
    "\130\006\037\007\040\010\035\021\133\001\002\000\016" +
    "\023\136\024\142\025\144\026\137\027\140\045\152\001" +
    "\002\000\014\013\ufff9\016\ufff9\017\ufff9\035\ufff9\036\ufff9" +
    "\001\002\000\016\005\uffd2\014\uffd2\041\uffd2\044\uffd2\046" +
    "\uffd2\050\uffd2\001\002\000\050\011\uffc3\015\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\032" +
    "\uffc3\033\uffc3\042\uffc3\045\uffc3\051\uffc3\052\uffc3\054\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\001\002\000\014\005\130\006" +
    "\037\007\040\010\035\021\133\001\002\000\020\022\uffc0" +
    "\023\136\024\142\025\144\026\137\027\140\030\161\001" +
    "\002\000\004\022\160\001\002\000\050\011\uffc1\015\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\032\uffc1\033\uffc1\042\uffc1\045\uffc1\051\uffc1\052\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\057\uffc1\001\002\000\014\005" +
    "\130\006\037\007\040\010\035\021\133\001\002\000\004" +
    "\022\uffbf\001\002\000\014\005\130\006\037\007\040\010" +
    "\035\021\133\001\002\000\016\011\uffcf\023\136\024\142" +
    "\025\144\026\137\027\140\001\002\000\004\011\uffbe\001" +
    "\002\000\016\005\uffd7\014\uffd7\041\uffd7\044\uffd7\046\uffd7" +
    "\050\uffd7\001\002\000\004\014\171\001\002\000\016\005" +
    "\ufff1\014\ufff1\041\ufff1\044\ufff1\046\ufff1\050\ufff1\001\002" +
    "\000\030\003\ufff5\005\ufff5\011\ufff5\012\ufff5\014\ufff5\041" +
    "\ufff5\043\ufff5\044\ufff5\046\ufff5\047\ufff5\050\ufff5\001\002" +
    "\000\004\047\173\001\002\000\016\005\130\006\037\007" +
    "\040\010\035\021\175\053\177\001\002\000\014\011\uffbc" +
    "\032\uffbc\033\uffbc\042\uffbc\045\uffbc\001\002\000\014\005" +
    "\130\006\037\007\040\010\035\021\133\001\002\000\026" +
    "\015\214\023\136\024\142\025\144\026\137\027\140\054" +
    "\210\055\213\056\211\057\207\001\002\000\016\005\130" +
    "\006\037\007\040\010\035\021\175\053\177\001\002\000" +
    "\010\011\204\032\201\033\203\001\002\000\016\005\uffba" +
    "\006\uffba\007\uffba\010\uffba\021\uffba\053\uffba\001\002\000" +
    "\016\005\130\006\037\007\040\010\035\021\175\053\177" +
    "\001\002\000\016\005\uffbb\006\uffbb\007\uffbb\010\uffbb\021" +
    "\uffbb\053\uffbb\001\002\000\016\005\uffd3\014\uffd3\041\uffd3" +
    "\044\uffd3\046\uffd3\050\uffd3\001\002\000\014\011\uffbd\032" +
    "\201\033\203\042\uffbd\045\uffbd\001\002\000\014\011\uffb7" +
    "\032\uffb7\033\uffb7\042\uffb7\045\uffb7\001\002\000\014\005" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\021\uffb3\001\002\000\014" +
    "\005\uffb6\006\uffb6\007\uffb6\010\uffb6\021\uffb6\001\002\000" +
    "\014\005\uffb4\006\uffb4\007\uffb4\010\uffb4\021\uffb4\001\002" +
    "\000\014\005\130\006\037\007\040\010\035\021\133\001" +
    "\002\000\014\005\uffb5\006\uffb5\007\uffb5\010\uffb5\021\uffb5" +
    "\001\002\000\014\005\uffb2\006\uffb2\007\uffb2\010\uffb2\021" +
    "\uffb2\001\002\000\026\011\uffb9\023\136\024\142\025\144" +
    "\026\137\027\140\032\uffb9\033\uffb9\042\uffb9\045\uffb9\001" +
    "\002\000\016\022\217\023\136\024\142\025\144\026\137" +
    "\027\140\001\002\000\040\011\uffb8\015\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\032\uffb8\033\uffb8\042\uffb8" +
    "\045\uffb8\054\uffc4\055\uffc4\056\uffc4\057\uffc4\001\002\000" +
    "\010\032\201\033\203\045\221\001\002\000\014\013\ufff9" +
    "\016\ufff9\017\ufff9\035\ufff9\036\ufff9\001\002\000\016\005" +
    "\uffd4\014\uffd4\041\uffd4\044\uffd4\046\uffd4\050\uffd4\001\002" +
    "\000\010\032\201\033\203\042\224\001\002\000\014\013" +
    "\ufff9\016\ufff9\017\ufff9\035\ufff9\036\ufff9\001\002\000\004" +
    "\043\226\001\002\000\014\013\ufff9\016\ufff9\017\ufff9\035" +
    "\ufff9\036\ufff9\001\002\000\016\005\uffd5\014\uffd5\041\uffd5" +
    "\044\uffd5\046\uffd5\050\uffd5\001\002\000\014\013\ufff9\016" +
    "\ufff9\017\ufff9\035\ufff9\036\ufff9\001\002\000\006\003\233" +
    "\012\232\001\002\000\004\002\ufffd\001\002\000\004\002" +
    "\000\001\002\000\004\011\235\001\002\000\014\013\ufff9" +
    "\016\ufff9\017\ufff9\035\ufff9\036\ufff9\001\002\000\004\012" +
    "\237\001\002\000\004\002\ufffe\001\002\000\004\002\001" +
    "\001\002\000\004\011\242\001\002\000\014\012\ufffc\016" +
    "\ufffc\017\ufffc\035\ufffc\036\ufffc\001\002\000\014\012\ufff4" +
    "\016\ufff4\017\ufff4\035\ufff4\036\ufff4\001\002\000\014\012" +
    "\ufffb\016\022\017\021\035\024\036\023\001\002\000\004" +
    "\012\246\001\002\000\004\002\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\013\043\012\001" +
    "\001\000\004\004\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\016\007\026\012\027\015\024\016" +
    "\025\044\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\046\014" +
    "\044\001\001\000\004\010\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\050\001\001\000\002\001\001\000\004\021\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\056\001\001\000\002\001\001\000\004\021" +
    "\060\001\001\000\002\001\001\000\004\047\062\001\001" +
    "\000\004\017\063\001\001\000\002\001\001\000\006\014" +
    "\066\020\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\070\001\001\000\002\001\001\000\006\014" +
    "\066\020\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\075\043\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\100\001\001\000\004\017\101" +
    "\001\001\000\002\001\001\000\004\021\103\001\001\000" +
    "\002\001\001\000\006\003\105\043\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\110\001\001\000" +
    "\014\005\114\022\115\024\116\025\120\034\122\001\001" +
    "\000\014\011\131\026\175\031\126\035\222\037\173\001" +
    "\001\000\014\011\131\026\175\031\126\035\217\037\173" +
    "\001\001\000\006\003\171\043\012\001\001\000\014\022" +
    "\167\024\116\025\120\034\122\046\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\131\026\130\031" +
    "\126\001\001\000\002\001\001\000\004\032\153\001\001" +
    "\000\010\023\147\027\134\030\142\001\001\000\002\001" +
    "\001\000\010\011\131\026\133\031\126\001\001\000\006" +
    "\027\134\030\142\001\001\000\010\011\131\026\144\031" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\134\030\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\131\026" +
    "\150\031\126\001\001\000\006\027\134\030\142\001\001" +
    "\000\006\003\152\043\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\131\026\155\031\126\033\156" +
    "\001\001\000\006\027\134\030\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\131\026\155\031\126" +
    "\033\161\001\001\000\002\001\001\000\010\011\131\026" +
    "\163\031\126\001\001\000\006\027\134\030\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\131\026\175\031\126\035\177\037\173\001\001\000" +
    "\002\001\001\000\010\011\131\026\215\031\126\001\001" +
    "\000\010\027\134\030\142\040\211\001\001\000\012\011" +
    "\131\026\175\031\126\037\205\001\001\000\004\036\201" +
    "\001\001\000\002\001\001\000\014\011\131\026\175\031" +
    "\126\035\204\037\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\131\026\214\031\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\134\030\142\001\001\000\006" +
    "\027\134\030\142\001\001\000\002\001\001\000\004\036" +
    "\201\001\001\000\006\003\221\043\012\001\001\000\002" +
    "\001\001\000\004\036\201\001\001\000\006\003\224\043" +
    "\012\001\001\000\002\001\001\000\006\003\226\043\012" +
    "\001\001\000\002\001\001\000\006\003\230\043\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\235\043\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\242\001\001\000\004\004\243\001" +
    "\001\000\016\006\016\007\026\012\027\015\024\016\025" +
    "\042\244\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
	public void syntax_error(String string, Symbol s){
		System.out.println(string + "Error localizado antes de: Linea "+s.left+" Columna "+s.right); 
	}
	public void unrecovered_syntax_error(String string, Symbol s){ 
                System.out.println("ERROR FATAL: " + string + "Error localizado antes de: Linea "+s.left+" Columna "+s.right); 
        }	
        ArrayList<String> var = new ArrayList<String>();
        ArrayList<String> fun = new ArrayList<String>();
        int nivel = 0;
        int nivelCab = 0;
        String funAct = "";
        String a;
        public String niveles(int n)
        {
            String a="";
            for(int t=0;t<n;t++)
            {
                a = "\t" + a;
            }
            return a;
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PRG ::= program_ identifier puntoComa BLQ error 
            {
              Object RESULT =null;
		
        syntax_error("Error: se esperaba '.'\n",cur_token);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRG ::= program_ error puntoComa BLQ punto 
            {
              Object RESULT =null;
		
        syntax_error("Error: identificador de programa erróneo\n",cur_token);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PRG ::= error identifier puntoComa BLQ punto 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
        syntax_error("Error: se esperaba 'program'\n",cur_token);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PRG ::= program_ identifier puntoComa BLQ punto 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        
        RESULT = b.cab + "void main (void) \n{\n" + b.valor + b.cierre;
        System.out.println(""+RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
nivelCab++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
nivelCab--;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PRG ::= unit_ identifier puntoComa NT$0 DCLLIST NT$1 punto 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        
        RESULT = "//Libreria: "+id+"\n"+ dList.valor;
        System.out.println(""+RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              Blq RESULT =null;
nivelCab++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Blq RESULT =(Blq) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
nivelCab--;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Blq RESULT =(Blq) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
nivel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$5 ::= 
            {
              Blq RESULT =(Blq) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentList sList = (SentList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
nivel--;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLQ ::= NT$2 DCLLIST NT$3 begin_ NT$4 SENTLIST NT$5 end_ 
            {
              Blq RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Blq) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SentList sList = (SentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = new Blq();
        RESULT.cab = dList.valor;
        RESULT.apertura = "{ \n";           
        RESULT.cierre = "} \n";
        RESULT.valor = sList.valor;
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DCLLIST ::= 
            {
              DcList RESULT =null;
		
        RESULT = new DcList();
        RESULT.valor = "";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DCLLIST ::= DCLLIST DCL 
            {
              DcList RESULT =null;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        RESULT = new DcList();
        RESULT.valor = dList.valor + d.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTLIST ::= SENT 
            {
              SentList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sent s = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new SentList();
        RESULT.valor = s.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTLIST ::= SENTLIST SENT 
            {
              SentList RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentList sList = (SentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sent s = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new SentList();
        RESULT.valor = sList.valor + s.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DCL ::= DEFCTE 
            {
              Def RESULT =null;
		int dCteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dCteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefCte dCte = (DefCte)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dCte.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DCL ::= DEFVAR 
            {
              Def RESULT =null;
		int dVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefVar dVar = (DefVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dVar.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DCL ::= DEFPROC 
            {
              Def RESULT =null;
		int dProcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dProcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefProc dProc = (DefProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dProc.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DCL ::= DEFFUN 
            {
              Def RESULT =null;
		int dFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefFun dFun = (DefFun)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dFun.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEFCTE ::= const_ CTELIST 
            {
              DefCte RESULT =null;
		int cListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CteList cList = (CteList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new DefCte();
        RESULT.valor = cList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CTELIST ::= identifier igual SIMPVALUE puntoComa 
            {
              CteList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Constantes sv = (Constantes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new CteList();
        RESULT.valor = "#define " + id + " " + sv.valor +"\n";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CTELIST ::= CTELIST identifier igual SIMPVALUE puntoComa 
            {
              CteList RESULT =null;
		int cListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CteList cList = (CteList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Constantes sv = (Constantes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new CteList();
        RESULT.valor = cList.valor + "#define " + id + " " + sv.valor + "\n"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SIMPVALUE ::= numeric_integer_const 
            {
              Constantes RESULT =null;
		int nicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nic = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Constantes();
        RESULT.valor = nic;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SIMPVALUE ::= numeric_real_const 
            {
              Constantes RESULT =null;
		int nrcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nrcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nrc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Constantes();
        RESULT.valor = nrc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SIMPVALUE ::= string_const 
            {
              Constantes RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Constantes();
        RESULT.valor = sc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEFVAR ::= var_ DEFVARLIST puntoComa 
            {
              DefVar RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dvListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefVarList dvList = (DefVarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new DefVar();
        RESULT.valor = dvList.cab + " " + dvList.valor + ";\n" ;
        for(int k = 0;k<nivelCab-1;k++)
        {
            RESULT.valor = "\t" + RESULT.valor;
        }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEFVARLIST ::= VARLIST dosPuntos TBAS 
            {
              DefVarList RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new DefVarList();
        RESULT.valor = vList.valor;
        RESULT.cab = t.valor;
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEFVARLIST ::= DEFVARLIST puntoComa VARLIST dosPuntos TBAS 
            {
              DefVarList RESULT =null;
		int dvListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dvListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DefVarList dvList = (DefVarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new DefVarList();
        RESULT.valor = dvList.valor + ";\n";
        for(int k = 0;k<nivelCab-1;k++)
        {
            RESULT.valor = RESULT.valor + "\t" ;
        }
        RESULT.valor = RESULT.valor + t.valor+ " " + vList.valor;
        RESULT.cab = dvList.cab;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VARLIST ::= identifier 
            {
              VarList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new VarList();
        RESULT.valor = id;
        RESULT.max = 1;
        RESULT.lista[0] = id;
        var.add(id);
 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VARLIST ::= identifier coma VARLIST 
            {
              VarList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new VarList();
        RESULT.valor = id + ", " + vList.valor; // para cuando no es una funcion
        for(int i =0; i<vList.max;i++)
        {
            RESULT.lista[i] = vList.lista[i];
        }
        RESULT.lista[vList.max]= id;
        RESULT.max = vList.max +1;
        var.add(id);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$6 ::= 
            {
              DefProc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
funAct="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEFPROC ::= procedure_ identifier NT$6 FORMAL_PARAMLIST puntoComa BLQ puntoComa 
            {
              DefProc RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (DefProc) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FormalParamList fpList = (FormalParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new DefProc();
        funAct="";
        RESULT.valor =  "void " + id + fpList.valor +"\n"+ b.apertura +b.cab + b.valor  + b.cierre;
        fun.add(id);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$7 ::= 
            {
              DefFun RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
fun.add(id);funAct=id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEFFUN ::= function_ identifier NT$7 FORMAL_PARAMLIST dosPuntos TBAS puntoComa BLQ puntoComa 
            {
              DefFun RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (DefFun) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FormalParamList fp = (FormalParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new DefFun();
        funAct = "";
        RESULT.valor =  t.valor +" "+ id +" "+ fp.valor  +"\n"+ b.apertura + b.cab + b.valor + b.cierre;
        fun.add(id);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FORMAL_PARAMLIST ::= 
            {
              FormalParamList RESULT =null;
		
        RESULT = new FormalParamList();
        RESULT.valor = "( void )";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FORMAL_PARAMLIST ::= abrirPar FORMAL_PARAM cerrarPar 
            {
              FormalParamList RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalParam fp = (FormalParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new FormalParamList();
        RESULT.valor = "("+fp.valor+")";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS 
            {
              FormalParam RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new FormalParam();
        RESULT.valor = t.valor + " " + vList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS puntoComa FORMAL_PARAM 
            {
              FormalParam RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalParam fp = (FormalParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new FormalParam();
        //RESULT.valor = t.valor +" "+ vList.valor + ", " + fp.valor;
        for (int i=vList.max;i>0;i--)
        {
            RESULT.valor = RESULT.valor + t.valor+" "+vList.lista[i-1]+", ";
        }
        RESULT.valor = RESULT.valor + " " + fp.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TBAS ::= int_ 
            {
              Tipo RESULT =null;
		
        RESULT = new Tipo();
        RESULT.valor = "int";        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TBAS ::= real_ 
            {
              Tipo RESULT =null;
		
        RESULT = new Tipo();
        RESULT.valor = "float";        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENT ::= ASIG puntoComa 
            {
              Sent RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asig a = (Asig)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Sent();
        RESULT.valor = a.valor + "; \n";
        for(int m=0;m<nivel;m++)
        {
            RESULT.valor = "\t" + RESULT.valor;
        }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENT ::= PROC_CALL puntoComa 
            {
              Sent RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcCall pc = (ProcCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Sent();
        RESULT.valor = pc.valor + "; \n" ;
        for(int j=0;j<nivel;j++)
        {
            RESULT.valor = "\t" + RESULT.valor;
        }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENT ::= if_ EXPCOND then_ BLQ else_ BLQ 
            {
              Sent RESULT =null;
		int ec1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ec1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpCond ec1 = (ExpCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Blq b1 = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Blq b2 = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Sent();
        String aux =niveles(nivel);

        RESULT.valor = aux + "if(" + ec1.valor + ")"; 
        RESULT.valor = RESULT.valor +"\n"+ aux + b1.apertura; 
        RESULT.valor = RESULT.valor + b1.cab + b1.valor;      
        RESULT.valor = RESULT.valor + aux + b1.cierre;
        RESULT.valor = RESULT.valor + aux + "else";
        RESULT.valor = RESULT.valor +"\n"+ aux+ b2.apertura;
        RESULT.valor = RESULT.valor + b2.cab + b2.valor;
        RESULT.valor = RESULT.valor + aux+b2.cierre;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENT ::= while_ EXPCOND do_ BLQ 
            {
              Sent RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpCond ec = (ExpCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String aux = niveles(nivel);
        RESULT = new Sent();
        RESULT.valor = aux + "while("+ec.valor+")";
        RESULT.valor = RESULT.valor +"\n"+ aux + b.apertura;
        RESULT.valor = RESULT.valor + b.cab + b.valor;      
        RESULT.valor = RESULT.valor + aux + b.cierre;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENT ::= repeat_ BLQ until_ EXPCOND puntoComa 
            {
              Sent RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpCond ec = (ExpCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        String aux = niveles(nivel);
        RESULT = new Sent();
        RESULT.valor = aux + "do";
        RESULT.valor = RESULT.valor +"\n"+ aux + b.apertura;
        RESULT.valor = RESULT.valor + b.cab + b.valor;  
        RESULT.valor = RESULT.valor + aux + b.cierre;
        RESULT.valor = RESULT.valor + aux + "until("+ec.valor+")\n";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENT ::= for_ identifier puntosIgual EXP INC EXP do_ BLQ 
            {
              Sent RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Inc i = (Inc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String aux = niveles(nivel);
        RESULT = new Sent();
        RESULT.valor = aux + "for("+id+"="+e1.valor+";"+id+i.valor+e2.valor+i.numero+";"+id+"="+id+i.numero+")";
        RESULT.valor = RESULT.valor +"\n"+ aux + b.apertura;
        RESULT.valor = RESULT.valor + b.cab + b.valor;      
        RESULT.valor = RESULT.valor + aux + b.cierre;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INC ::= to_ 
            {
              Inc RESULT =null;
		
        RESULT= new Inc();
        RESULT.valor="<";
        RESULT.numero="+1";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INC ::= downto_ 
            {
              Inc RESULT =null;
		
        RESULT= new Inc();
        RESULT.valor=">";
        RESULT.numero="-1";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIG ::= ID puntosIgual EXP 
            {
              Asig RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Asig();
        if(id.valor.equals(funAct))
            RESULT.valor = "return " + e.valor;
        else
            RESULT.valor = id.valor + " = " + e.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ID ::= identifier 
            {
              Id RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new Id();
        RESULT.valor=id;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= EXP OP EXP 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Op o = (Op)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Exp();
        RESULT.valor = e1.valor + o.valor + e2.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= FACTOR 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Exp();
        RESULT.valor = f.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OP ::= OPARIT 
            {
              Op RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operadores op = (Operadores)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Op();
        RESULT.valor = op.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPARIT ::= mas_ 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "+ ";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPARIT ::= menos 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "- ";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPARIT ::= mul 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "* ";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPARIT ::= div_ 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "/ ";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPARIT ::= mod_ 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "% "; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FACTOR ::= SIMPVALUE 
            {
              Factor RESULT =null;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constantes sv = (Constantes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new Factor();
        RESULT.valor= sv.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FACTOR ::= abrirPar EXP cerrarPar 
            {
              Factor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT=new Factor();
        RESULT.valor = "(" + e.valor + ")"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FACTOR ::= identifier SUBPPARAMLIST 
            {
              Factor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SubPparamList subList = (SubPparamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new Factor();
        if (subList.valor == "")
        {
            if(fun.contains(id))
                RESULT.valor = id + "()";
            else
                RESULT.valor = id;
        }
        else
            RESULT.valor = id + subList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SUBPPARAMLIST ::= 
            {
              SubPparamList RESULT =null;
		
        RESULT = new SubPparamList();
        RESULT.valor = "";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SUBPPARAMLIST ::= abrirPar EXPLIST cerrarPar 
            {
              SubPparamList RESULT =null;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList eList = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new SubPparamList();
        RESULT.valor = "(" + eList.valor + ")";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPLIST ::= EXP 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ExpList();
        RESULT.valor = e.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPLIST ::= EXP coma EXPLIST 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList eList = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ExpList();
        RESULT.valor = e.valor + ", " + eList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PROC_CALL ::= identifier SUBPPARAMLIST 
            {
              ProcCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SubPparamList subList = (SubPparamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ProcCall();
        if (subList.valor == "")
        {
            if(fun.contains(id))
                RESULT.valor = id + "()";
            else
                RESULT.valor = id;
        }
        else
            RESULT.valor = id + subList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPCOND ::= EXPCOND OPLOG EXPCOND 
            {
              ExpCond RESULT =null;
		int ec1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ec1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpCond ec1 = (ExpCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oplogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oplogright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OpLog oplog = (OpLog)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ec2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ec2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpCond ec2 = (ExpCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new ExpCond();
        RESULT.valor = ec1.valor +" "+ oplog.valor +" "+ ec2.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPCOND ::= FACTORCOND 
            {
              ExpCond RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FactorCond fc = (FactorCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new ExpCond();
        RESULT.valor = fc.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPLOG ::= or_ 
            {
              OpLog RESULT =null;
		
        RESULT=new OpLog();
        RESULT.valor = "||";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPLOG ::= and_ 
            {
              OpLog RESULT =null;
		
        RESULT=new OpLog();
        RESULT.valor = "&&";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FACTORCOND ::= EXP OPCOMP EXP 
            {
              FactorCond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OpComp oc = (OpComp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new FactorCond();
        RESULT.valor = e1.valor +" "+ oc.valor+" "+e2.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FACTORCOND ::= abrirPar EXP cerrarPar 
            {
              FactorCond RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT=new FactorCond();
        RESULT.valor = "("+e.valor+")";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FACTORCOND ::= not_ FACTORCOND 
            {
              FactorCond RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FactorCond f = (FactorCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new FactorCond();
        RESULT.valor = "!"+f.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPCOMP ::= menor 
            {
              OpComp RESULT =null;
		
        RESULT=new OpComp();
        RESULT.valor = "<";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPCOMP ::= mayor 
            {
              OpComp RESULT =null;
		
        RESULT=new OpComp();
        RESULT.valor = ">";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPCOMP ::= menorIgual 
            {
              OpComp RESULT =null;
		
        RESULT=new OpComp();
        RESULT.valor = "<=";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPCOMP ::= mayorIgual 
            {
              OpComp RESULT =null;
		
        RESULT=new OpComp();
        RESULT.valor = ">=";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPCOMP ::= igual 
            {
              OpComp RESULT =null;
		
        RESULT=new OpComp();
        RESULT.valor = "=";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
