
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package traductorPascalC;

import java_cup.runtime.Symbol;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\007\000\002\002" +
    "\007\000\002\003\006\000\002\004\002\000\002\004\004" +
    "\000\002\005\003\000\002\005\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\007\004\000\002\010\006\000\002\010\007\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\005" +
    "\000\002\013\005\000\002\013\007\000\002\014\003\000" +
    "\002\014\005\000\002\015\010\000\002\016\012\000\002" +
    "\017\002\000\002\017\005\000\002\020\005\000\002\020" +
    "\007\000\002\021\003\000\002\021\003\000\002\022\004" +
    "\000\002\022\004\000\002\022\010\000\002\022\006\000" +
    "\002\022\007\000\002\022\012\000\002\023\003\000\002" +
    "\023\003\000\002\024\005\000\002\025\003\000\002\026" +
    "\005\000\002\026\003\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\031\003\000\002\031\005\000\002" +
    "\031\004\000\002\032\003\000\002\032\005\000\002\033" +
    "\003\000\002\033\005\000\002\034\004\000\002\035\005" +
    "\000\002\035\003\000\002\036\003\000\002\036\003\000" +
    "\002\037\005\000\002\037\005\000\002\037\004\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\006\004\006\035\004\001\002\000\004\005" +
    "\222\001\002\000\004\002\221\001\002\000\004\005\007" +
    "\001\002\000\004\011\010\001\002\000\014\013\ufffd\016" +
    "\ufffd\017\ufffd\036\ufffd\037\ufffd\001\002\000\014\013\024" +
    "\016\016\017\015\036\020\037\017\001\002\000\004\012" +
    "\013\001\002\000\004\002\000\001\002\000\016\012\ufffc" +
    "\013\ufffc\016\ufffc\017\ufffc\036\ufffc\037\ufffc\001\002\000" +
    "\004\005\212\001\002\000\004\005\175\001\002\000\004" +
    "\005\161\001\002\000\004\005\147\001\002\000\016\012" +
    "\ufff7\013\ufff7\016\ufff7\017\ufff7\036\ufff7\037\ufff7\001\002" +
    "\000\016\012\ufff6\013\ufff6\016\ufff6\017\ufff6\036\ufff6\037" +
    "\ufff6\001\002\000\016\012\ufff9\013\ufff9\016\ufff9\017\ufff9" +
    "\036\ufff9\037\ufff9\001\002\000\014\005\034\042\026\045" +
    "\027\047\030\051\036\001\002\000\016\012\ufff8\013\ufff8" +
    "\016\ufff8\017\ufff8\036\ufff8\037\ufff8\001\002\000\016\005" +
    "\044\006\050\007\052\010\045\021\114\054\116\001\002" +
    "\000\016\005\044\006\050\007\052\010\045\021\114\054" +
    "\116\001\002\000\014\013\ufffd\016\ufffd\017\ufffd\036\ufffd" +
    "\037\ufffd\001\002\000\016\005\034\014\110\042\026\045" +
    "\027\047\030\051\036\001\002\000\016\005\ufffb\014\ufffb" +
    "\042\ufffb\045\ufffb\047\ufffb\051\ufffb\001\002\000\004\011" +
    "\106\001\002\000\010\021\075\023\073\032\uffd9\001\002" +
    "\000\004\032\103\001\002\000\004\005\041\001\002\000" +
    "\004\011\040\001\002\000\016\005\uffe1\014\uffe1\042\uffe1" +
    "\045\uffe1\047\uffe1\051\uffe1\001\002\000\004\032\042\001" +
    "\002\000\014\005\044\006\050\007\052\010\045\021\051" +
    "\001\002\000\050\011\uffd7\015\uffd7\022\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7\034\uffd7" +
    "\043\uffd7\046\uffd7\052\uffd7\053\uffd7\055\uffd7\056\uffd7\057" +
    "\uffd7\060\uffd7\001\002\000\006\021\075\023\073\001\002" +
    "\000\050\011\ufff0\015\ufff0\022\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\033\ufff0\034\ufff0\043\ufff0" +
    "\046\ufff0\052\ufff0\053\ufff0\055\ufff0\056\ufff0\057\ufff0\060" +
    "\ufff0\001\002\000\020\024\057\025\061\026\063\027\055" +
    "\030\056\052\066\053\065\001\002\000\050\011\uffd0\015" +
    "\uffd0\022\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\033\uffd0\034\uffd0\043\uffd0\046\uffd0\052\uffd0\053" +
    "\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\001\002\000\050" +
    "\011\ufff2\015\ufff2\022\ufff2\024\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\033\ufff2\034\ufff2\043\ufff2\046\ufff2" +
    "\052\ufff2\053\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\001" +
    "\002\000\014\005\044\006\050\007\052\010\045\021\051" +
    "\001\002\000\050\011\ufff1\015\ufff1\022\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\033\ufff1\034\ufff1" +
    "\043\ufff1\046\ufff1\052\ufff1\053\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\060\ufff1\001\002\000\016\022\060\024\057\025\061" +
    "\026\063\027\055\030\056\001\002\000\014\005\044\006" +
    "\050\007\052\010\045\021\051\001\002\000\014\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\021\uffd2\001\002\000\014\005" +
    "\uffd1\006\uffd1\007\uffd1\010\uffd1\021\uffd1\001\002\000\014" +
    "\005\uffd5\006\uffd5\007\uffd5\010\uffd5\021\uffd5\001\002\000" +
    "\050\011\uffcf\015\uffcf\022\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\033\uffcf\034\uffcf\043\uffcf\046" +
    "\uffcf\052\uffcf\053\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf" +
    "\001\002\000\014\005\uffd4\006\uffd4\007\uffd4\010\uffd4\021" +
    "\uffd4\001\002\000\014\005\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\021\uffd6\001\002\000\014\005\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\021\uffd3\001\002\000\050\011\uffd8\015\uffd8\022\uffd8" +
    "\024\057\025\061\026\063\027\055\030\056\031\uffd8\033" +
    "\uffd8\034\uffd8\043\uffd8\046\uffd8\052\uffd8\053\uffd8\055\uffd8" +
    "\056\uffd8\057\uffd8\060\uffd8\001\002\000\014\005\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\021\uffdc\001\002\000\014\005\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\021\uffdb\001\002\000\014\005" +
    "\044\006\050\007\052\010\045\021\051\001\002\000\016" +
    "\024\057\025\061\026\063\027\055\030\056\046\071\001" +
    "\002\000\014\013\ufffd\016\ufffd\017\ufffd\036\ufffd\037\ufffd" +
    "\001\002\000\016\005\uffdd\014\uffdd\042\uffdd\045\uffdd\047" +
    "\uffdd\051\uffdd\001\002\000\050\011\uffcd\015\uffcd\022\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\033" +
    "\uffcd\034\uffcd\043\uffcd\046\uffcd\052\uffcd\053\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\060\uffcd\001\002\000\050\011\uffce\015" +
    "\uffce\022\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\033\uffce\034\uffce\043\uffce\046\uffce\052\uffce\053" +
    "\uffce\055\uffce\056\uffce\057\uffce\060\uffce\001\002\000\014" +
    "\005\044\006\050\007\052\010\045\021\051\001\002\000" +
    "\020\022\uffcb\024\057\025\061\026\063\027\055\030\056" +
    "\031\101\001\002\000\004\022\100\001\002\000\050\011" +
    "\uffcc\015\uffcc\022\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\033\uffcc\034\uffcc\043\uffcc\046\uffcc\052" +
    "\uffcc\053\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\001\002" +
    "\000\014\005\044\006\050\007\052\010\045\021\051\001" +
    "\002\000\004\022\uffca\001\002\000\014\005\044\006\050" +
    "\007\052\010\045\021\051\001\002\000\016\011\uffda\024" +
    "\057\025\061\026\063\027\055\030\056\001\002\000\004" +
    "\011\uffc9\001\002\000\016\005\uffe2\014\uffe2\042\uffe2\045" +
    "\uffe2\047\uffe2\051\uffe2\001\002\000\016\005\ufffa\014\ufffa" +
    "\042\ufffa\045\ufffa\047\ufffa\051\ufffa\001\002\000\026\005" +
    "\ufffe\011\ufffe\012\ufffe\014\ufffe\042\ufffe\044\ufffe\045\ufffe" +
    "\047\ufffe\050\ufffe\051\ufffe\001\002\000\004\050\112\001" +
    "\002\000\016\005\044\006\050\007\052\010\045\021\114" +
    "\054\116\001\002\000\014\011\uffc7\033\uffc7\034\uffc7\043" +
    "\uffc7\046\uffc7\001\002\000\014\005\044\006\050\007\052" +
    "\010\045\021\051\001\002\000\026\015\133\024\057\025" +
    "\061\026\063\027\055\030\056\055\127\056\132\057\130" +
    "\060\126\001\002\000\016\005\044\006\050\007\052\010" +
    "\045\021\114\054\116\001\002\000\010\011\123\033\120" +
    "\034\122\001\002\000\016\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\021\uffc5\054\uffc5\001\002\000\016\005\044\006\050" +
    "\007\052\010\045\021\114\054\116\001\002\000\016\005" +
    "\uffc6\006\uffc6\007\uffc6\010\uffc6\021\uffc6\054\uffc6\001\002" +
    "\000\016\005\uffde\014\uffde\042\uffde\045\uffde\047\uffde\051" +
    "\uffde\001\002\000\014\011\uffc8\033\120\034\122\043\uffc8" +
    "\046\uffc8\001\002\000\014\011\uffc2\033\uffc2\034\uffc2\043" +
    "\uffc2\046\uffc2\001\002\000\014\005\uffbe\006\uffbe\007\uffbe" +
    "\010\uffbe\021\uffbe\001\002\000\014\005\uffc1\006\uffc1\007" +
    "\uffc1\010\uffc1\021\uffc1\001\002\000\014\005\uffbf\006\uffbf" +
    "\007\uffbf\010\uffbf\021\uffbf\001\002\000\014\005\044\006" +
    "\050\007\052\010\045\021\051\001\002\000\014\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\021\uffc0\001\002\000\014\005" +
    "\uffbd\006\uffbd\007\uffbd\010\uffbd\021\uffbd\001\002\000\026" +
    "\011\uffc4\024\057\025\061\026\063\027\055\030\056\033" +
    "\uffc4\034\uffc4\043\uffc4\046\uffc4\001\002\000\016\022\136" +
    "\024\057\025\061\026\063\027\055\030\056\001\002\000" +
    "\040\011\uffc3\015\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\033\uffc3\034\uffc3\043\uffc3\046\uffc3\055\uffcf\056" +
    "\uffcf\057\uffcf\060\uffcf\001\002\000\010\033\120\034\122" +
    "\046\140\001\002\000\014\013\ufffd\016\ufffd\017\ufffd\036" +
    "\ufffd\037\ufffd\001\002\000\016\005\uffdf\014\uffdf\042\uffdf" +
    "\045\uffdf\047\uffdf\051\uffdf\001\002\000\010\033\120\034" +
    "\122\043\143\001\002\000\014\013\ufffd\016\ufffd\017\ufffd" +
    "\036\ufffd\037\ufffd\001\002\000\004\044\145\001\002\000" +
    "\014\013\ufffd\016\ufffd\017\ufffd\036\ufffd\037\ufffd\001\002" +
    "\000\016\005\uffe0\014\uffe0\042\uffe0\045\uffe0\047\uffe0\051" +
    "\uffe0\001\002\000\004\015\155\001\002\000\020\005\151" +
    "\012\ufff5\013\ufff5\016\ufff5\017\ufff5\036\ufff5\037\ufff5\001" +
    "\002\000\004\015\152\001\002\000\010\006\050\007\052" +
    "\010\045\001\002\000\004\011\154\001\002\000\020\005" +
    "\ufff3\012\ufff3\013\ufff3\016\ufff3\017\ufff3\036\ufff3\037\ufff3" +
    "\001\002\000\010\006\050\007\052\010\045\001\002\000" +
    "\004\011\157\001\002\000\020\005\ufff4\012\ufff4\013\ufff4" +
    "\016\ufff4\017\ufff4\036\ufff4\037\ufff4\001\002\000\004\020" +
    "\173\001\002\000\006\020\uffec\031\171\001\002\000\004" +
    "\011\163\001\002\000\020\005\161\012\uffef\013\uffef\016" +
    "\uffef\017\uffef\036\uffef\037\uffef\001\002\000\004\020\165" +
    "\001\002\000\006\040\170\041\167\001\002\000\004\011" +
    "\uffed\001\002\000\006\011\uffe3\022\uffe3\001\002\000\006" +
    "\011\uffe4\022\uffe4\001\002\000\004\005\161\001\002\000" +
    "\004\020\uffeb\001\002\000\006\040\170\041\167\001\002" +
    "\000\004\011\uffee\001\002\000\006\011\uffe8\021\177\001" +
    "\002\000\004\011\207\001\002\000\004\005\161\001\002" +
    "\000\004\022\206\001\002\000\004\020\202\001\002\000" +
    "\006\040\170\041\167\001\002\000\006\011\204\022\uffe6" +
    "\001\002\000\004\005\161\001\002\000\004\022\uffe5\001" +
    "\002\000\006\011\uffe7\020\uffe7\001\002\000\014\013\ufffd" +
    "\016\ufffd\017\ufffd\036\ufffd\037\ufffd\001\002\000\004\011" +
    "\211\001\002\000\016\012\uffea\013\uffea\016\uffea\017\uffea" +
    "\036\uffea\037\uffea\001\002\000\006\020\uffe8\021\177\001" +
    "\002\000\004\020\214\001\002\000\006\040\170\041\167" +
    "\001\002\000\004\011\216\001\002\000\014\013\ufffd\016" +
    "\ufffd\017\ufffd\036\ufffd\037\ufffd\001\002\000\004\011\220" +
    "\001\002\000\016\012\uffe9\013\uffe9\016\uffe9\017\uffe9\036" +
    "\uffe9\037\uffe9\001\002\000\004\002\001\001\002\000\004" +
    "\011\223\001\002\000\014\012\ufffd\016\ufffd\017\ufffd\036" +
    "\ufffd\037\ufffd\001\002\000\014\012\225\016\016\017\015" +
    "\036\020\037\017\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\011\004\010\001\001\000\014\006\013\007\022\012" +
    "\024\015\020\016\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\161\014\157\001\001\000\004\010\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\030\022\031\024\032\025\034\034\036" +
    "\001\001\000\002\001\001\000\014\011\046\026\114\031" +
    "\042\035\141\037\112\001\001\000\014\011\046\026\114" +
    "\031\042\035\136\037\112\001\001\000\006\003\110\004" +
    "\010\001\001\000\012\022\106\024\032\025\034\034\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\046\026\045\031\042\001\001\000\002\001\001\000\004" +
    "\032\073\001\001\000\002\001\001\000\010\023\066\027" +
    "\053\030\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\046\026\052\031\042\001\001\000\002\001" +
    "\001\000\006\027\053\030\061\001\001\000\010\011\046" +
    "\026\063\031\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\053\030" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\046\026\067\031\042\001\001\000\006\027\053\030" +
    "\061\001\001\000\006\003\071\004\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\046\026\075\031\042\033\076\001\001\000\006\027\053" +
    "\030\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\046\026\075\031\042\033\101\001\001\000\002" +
    "\001\001\000\010\011\046\026\103\031\042\001\001\000" +
    "\006\027\053\030\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\011\046\026\114\031\042\035\116\037\112" +
    "\001\001\000\002\001\001\000\010\011\046\026\134\031" +
    "\042\001\001\000\010\027\053\030\061\040\130\001\001" +
    "\000\012\011\046\026\114\031\042\037\124\001\001\000" +
    "\004\036\120\001\001\000\002\001\001\000\014\011\046" +
    "\026\114\031\042\035\123\037\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\046\026\133\031\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\053\030\061\001" +
    "\001\000\006\027\053\030\061\001\001\000\002\001\001" +
    "\000\004\036\120\001\001\000\006\003\140\004\010\001" +
    "\001\000\002\001\001\000\004\036\120\001\001\000\006" +
    "\003\143\004\010\001\001\000\002\001\001\000\006\003" +
    "\145\004\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\163" +
    "\001\001\000\002\001\001\000\004\021\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\171\001\001\000\002\001\001\000\004\021\173\001" +
    "\001\000\002\001\001\000\004\017\175\001\001\000\002" +
    "\001\001\000\006\014\200\020\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\202\001\001\000\002" +
    "\001\001\000\006\014\200\020\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\207\004\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\212\001" +
    "\001\000\002\001\001\000\004\021\214\001\001\000\002" +
    "\001\001\000\006\003\216\004\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\223\001\001\000\014\006\013\007\022\012" +
    "\024\015\020\016\021\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PRG ::= program_ identifier puntoComa BLQ punto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRG ::= unit_ identifier puntoComa DCLLIST punto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLQ ::= DCLLIST begin_ SENTLIST end_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DCLLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DCLLIST ::= DCLLIST DCL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTLIST ::= SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DCL ::= DEFCTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DCL ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCL ::= DEFPROC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DCL ::= DEFFUN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFCTE ::= const_ CTELIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CTELIST ::= identifier igual SIMPVALUE puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CTELIST ::= CTELIST identifier igual SIMPVALUE puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SIMPVALUE ::= numeric_integer_const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SIMPVALUE ::= numeric_real_const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SIMPVALUE ::= string_const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DEFVAR ::= var_ DEFVARLIST puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DEFVARLIST ::= VARLIST dosPuntos TBAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEFVARLIST ::= DEFVARLIST puntoComa VARLIST dosPuntos TBAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VARLIST ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VARLIST ::= identifier coma VARLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DEFPROC ::= procedure_ identifier FORMAL_PARAMLIST puntoComa BLQ puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFFUN ::= function_ identifier FORMAL_PARAMLIST dosPuntos TBAS puntoComa BLQ puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FORMAL_PARAMLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FORMAL_PARAMLIST ::= abrirPar FORMAL_PARAM cerrarPar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS puntoComa FORMAL_PARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TBAS ::= int_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TBAS ::= real_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENT ::= ASIG puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENT ::= PROC_CALL puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENT ::= if_ EXPCOND then_ BLQ else_ BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENT ::= while_ EXPCOND do_ BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= repeat_ BLQ until_ EXPCOND puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT ::= for_ identifier puntosIgual EXP INC EXP do_ BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INC ::= to_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INC ::= downto_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIG ::= ID puntosIgual EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ID ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP ::= OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPARIT ::= mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPARIT ::= menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPARIT ::= mul 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPARIT ::= div_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPARIT ::= mod_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FACTOR ::= SIMPVALUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FACTOR ::= abrirPar EXP cerrarPar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FACTOR ::= identifier SUBPPARAMLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SUBPPARAMLIST ::= lambda 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SUBPPARAMLIST ::= abrirPar EXPLIST cerrarPar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPLIST ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPLIST ::= EXP coma EXPLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PROC_CALL ::= identifier SUBPPARAMLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPCOND ::= EXPCOND OPLOG EXPCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPCOND ::= FACTORCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPLOG ::= or_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPLOG ::= and_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FACTORCOND ::= EXP OPCOMP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FACTORCOND ::= abrirPar EXP cerrarPar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FACTORCOND ::= not_ FACTORCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPCOMP ::= menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPCOMP ::= mayor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPCOMP ::= menorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPCOMP ::= mayorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPCOMP ::= igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
