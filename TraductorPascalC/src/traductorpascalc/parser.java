
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package traductorpascalc;

import java_cup.runtime.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\041\002\000\002\002" +
    "\010\000\002\002\007\000\002\003\006\000\002\004\002" +
    "\000\002\004\004\000\002\005\003\000\002\005\004\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\004\000\002\010\006\000\002\010" +
    "\007\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\005\000\002\013\005\000\002\013\007\000" +
    "\002\014\003\000\002\014\005\000\002\015\010\000\002" +
    "\016\012\000\002\017\002\000\002\017\005\000\002\020" +
    "\005\000\002\020\007\000\002\021\003\000\002\021\003" +
    "\000\002\022\004\000\002\022\004\000\002\022\010\000" +
    "\002\022\006\000\002\022\007\000\002\022\012\000\002" +
    "\023\003\000\002\023\003\000\002\024\005\000\002\025" +
    "\003\000\002\026\005\000\002\026\003\000\002\027\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\031\003\000\002" +
    "\031\005\000\002\031\004\000\002\032\002\000\002\032" +
    "\005\000\002\033\003\000\002\033\005\000\002\034\004" +
    "\000\002\035\005\000\002\035\003\000\002\036\003\000" +
    "\002\036\003\000\002\037\005\000\002\037\005\000\002" +
    "\037\004\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\006\004\006\035\004\001\002\000\004\005" +
    "\222\001\002\000\004\002\221\001\002\000\004\005\007" +
    "\001\002\000\004\011\010\001\002\000\014\013\000\016" +
    "\000\017\000\036\000\037\000\001\002\000\014\013\ufffc" +
    "\016\ufffc\017\ufffc\036\ufffc\037\ufffc\001\002\000\014\013" +
    "\025\016\017\017\016\036\021\037\020\001\002\000\004" +
    "\012\014\001\002\000\004\002\uffff\001\002\000\016\012" +
    "\ufffb\013\ufffb\016\ufffb\017\ufffb\036\ufffb\037\ufffb\001\002" +
    "\000\004\005\212\001\002\000\004\005\175\001\002\000" +
    "\004\005\161\001\002\000\004\005\147\001\002\000\016" +
    "\012\ufff6\013\ufff6\016\ufff6\017\ufff6\036\ufff6\037\ufff6\001" +
    "\002\000\016\012\ufff5\013\ufff5\016\ufff5\017\ufff5\036\ufff5" +
    "\037\ufff5\001\002\000\016\012\ufff8\013\ufff8\016\ufff8\017" +
    "\ufff8\036\ufff8\037\ufff8\001\002\000\014\005\035\042\027" +
    "\045\030\047\031\051\037\001\002\000\016\012\ufff7\013" +
    "\ufff7\016\ufff7\017\ufff7\036\ufff7\037\ufff7\001\002\000\016" +
    "\005\045\006\051\007\053\010\046\021\114\054\116\001" +
    "\002\000\016\005\045\006\051\007\053\010\046\021\114" +
    "\054\116\001\002\000\014\013\ufffc\016\ufffc\017\ufffc\036" +
    "\ufffc\037\ufffc\001\002\000\016\005\035\014\110\042\027" +
    "\045\030\047\031\051\037\001\002\000\016\005\ufffa\014" +
    "\ufffa\042\ufffa\045\ufffa\047\ufffa\051\ufffa\001\002\000\004" +
    "\011\106\001\002\000\010\011\uffcc\021\075\032\uffd8\001" +
    "\002\000\004\032\103\001\002\000\004\005\042\001\002" +
    "\000\004\011\041\001\002\000\016\005\uffe0\014\uffe0\042" +
    "\uffe0\045\uffe0\047\uffe0\051\uffe0\001\002\000\004\032\043" +
    "\001\002\000\014\005\045\006\051\007\053\010\046\021" +
    "\052\001\002\000\050\011\uffd6\015\uffd6\022\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\033\uffd6\034" +
    "\uffd6\043\uffd6\046\uffd6\052\uffd6\053\uffd6\055\uffd6\056\uffd6" +
    "\057\uffd6\060\uffd6\001\002\000\052\011\uffcc\015\uffcc\021" +
    "\075\022\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\033\uffcc\034\uffcc\043\uffcc\046\uffcc\052\uffcc\053" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\001\002\000\050" +
    "\011\uffef\015\uffef\022\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\033\uffef\034\uffef\043\uffef\046\uffef" +
    "\052\uffef\053\uffef\055\uffef\056\uffef\057\uffef\060\uffef\001" +
    "\002\000\020\024\056\025\062\026\064\027\057\030\060" +
    "\052\067\053\066\001\002\000\050\011\uffcf\015\uffcf\022" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\033\uffcf\034\uffcf\043\uffcf\046\uffcf\052\uffcf\053\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\001\002\000\050\011\ufff1" +
    "\015\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030" +
    "\ufff1\031\ufff1\033\ufff1\034\ufff1\043\ufff1\046\ufff1\052\ufff1" +
    "\053\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\001\002\000" +
    "\014\005\045\006\051\007\053\010\046\021\052\001\002" +
    "\000\050\011\ufff0\015\ufff0\022\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\033\ufff0\034\ufff0\043\ufff0" +
    "\046\ufff0\052\ufff0\053\ufff0\055\ufff0\056\ufff0\057\ufff0\060" +
    "\ufff0\001\002\000\016\022\061\024\056\025\062\026\064" +
    "\027\057\030\060\001\002\000\014\005\045\006\051\007" +
    "\053\010\046\021\052\001\002\000\014\005\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\021\uffd4\001\002\000\014\005\uffd1\006" +
    "\uffd1\007\uffd1\010\uffd1\021\uffd1\001\002\000\014\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\021\uffd0\001\002\000\050\011" +
    "\uffce\015\uffce\022\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\033\uffce\034\uffce\043\uffce\046\uffce\052" +
    "\uffce\053\uffce\055\uffce\056\uffce\057\uffce\060\uffce\001\002" +
    "\000\014\005\uffd3\006\uffd3\007\uffd3\010\uffd3\021\uffd3\001" +
    "\002\000\014\005\uffd5\006\uffd5\007\uffd5\010\uffd5\021\uffd5" +
    "\001\002\000\014\005\uffd2\006\uffd2\007\uffd2\010\uffd2\021" +
    "\uffd2\001\002\000\050\011\uffd7\015\uffd7\022\uffd7\024\056" +
    "\025\062\026\064\027\057\030\060\031\uffd7\033\uffd7\034" +
    "\uffd7\043\uffd7\046\uffd7\052\uffd7\053\uffd7\055\uffd7\056\uffd7" +
    "\057\uffd7\060\uffd7\001\002\000\014\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\021\uffdb\001\002\000\014\005\uffda\006\uffda" +
    "\007\uffda\010\uffda\021\uffda\001\002\000\014\005\045\006" +
    "\051\007\053\010\046\021\052\001\002\000\016\024\056" +
    "\025\062\026\064\027\057\030\060\046\072\001\002\000" +
    "\014\013\ufffc\016\ufffc\017\ufffc\036\ufffc\037\ufffc\001\002" +
    "\000\016\005\uffdc\014\uffdc\042\uffdc\045\uffdc\047\uffdc\051" +
    "\uffdc\001\002\000\050\011\uffcd\015\uffcd\022\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\033\uffcd\034" +
    "\uffcd\043\uffcd\046\uffcd\052\uffcd\053\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\060\uffcd\001\002\000\014\005\045\006\051\007" +
    "\053\010\046\021\052\001\002\000\004\022\102\001\002" +
    "\000\020\022\uffca\024\056\025\062\026\064\027\057\030" +
    "\060\031\100\001\002\000\014\005\045\006\051\007\053" +
    "\010\046\021\052\001\002\000\004\022\uffc9\001\002\000" +
    "\050\011\uffcb\015\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\033\uffcb\034\uffcb\043\uffcb\046" +
    "\uffcb\052\uffcb\053\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\001\002\000\014\005\045\006\051\007\053\010\046\021" +
    "\052\001\002\000\016\011\uffd9\024\056\025\062\026\064" +
    "\027\057\030\060\001\002\000\004\011\uffc8\001\002\000" +
    "\016\005\uffe1\014\uffe1\042\uffe1\045\uffe1\047\uffe1\051\uffe1" +
    "\001\002\000\016\005\ufff9\014\ufff9\042\ufff9\045\ufff9\047" +
    "\ufff9\051\ufff9\001\002\000\026\005\ufffd\011\ufffd\012\ufffd" +
    "\014\ufffd\042\ufffd\044\ufffd\045\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\001\002\000\004\050\112\001\002\000\016\005\045" +
    "\006\051\007\053\010\046\021\114\054\116\001\002\000" +
    "\014\011\uffc6\033\uffc6\034\uffc6\043\uffc6\046\uffc6\001\002" +
    "\000\014\005\045\006\051\007\053\010\046\021\052\001" +
    "\002\000\026\015\133\024\056\025\062\026\064\027\057" +
    "\030\060\055\127\056\132\057\130\060\126\001\002\000" +
    "\016\005\045\006\051\007\053\010\046\021\114\054\116" +
    "\001\002\000\010\011\123\033\120\034\122\001\002\000" +
    "\016\005\uffc4\006\uffc4\007\uffc4\010\uffc4\021\uffc4\054\uffc4" +
    "\001\002\000\016\005\045\006\051\007\053\010\046\021" +
    "\114\054\116\001\002\000\016\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\021\uffc5\054\uffc5\001\002\000\016\005\uffdd\014" +
    "\uffdd\042\uffdd\045\uffdd\047\uffdd\051\uffdd\001\002\000\014" +
    "\011\uffc7\033\120\034\122\043\uffc7\046\uffc7\001\002\000" +
    "\014\011\uffc1\033\uffc1\034\uffc1\043\uffc1\046\uffc1\001\002" +
    "\000\014\005\uffbd\006\uffbd\007\uffbd\010\uffbd\021\uffbd\001" +
    "\002\000\014\005\uffc0\006\uffc0\007\uffc0\010\uffc0\021\uffc0" +
    "\001\002\000\014\005\uffbe\006\uffbe\007\uffbe\010\uffbe\021" +
    "\uffbe\001\002\000\014\005\045\006\051\007\053\010\046" +
    "\021\052\001\002\000\014\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\021\uffbf\001\002\000\014\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\021\uffbc\001\002\000\026\011\uffc3\024\056\025" +
    "\062\026\064\027\057\030\060\033\uffc3\034\uffc3\043\uffc3" +
    "\046\uffc3\001\002\000\016\022\136\024\056\025\062\026" +
    "\064\027\057\030\060\001\002\000\040\011\uffc2\015\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\033\uffc2\034" +
    "\uffc2\043\uffc2\046\uffc2\055\uffce\056\uffce\057\uffce\060\uffce" +
    "\001\002\000\010\033\120\034\122\046\140\001\002\000" +
    "\014\013\ufffc\016\ufffc\017\ufffc\036\ufffc\037\ufffc\001\002" +
    "\000\016\005\uffde\014\uffde\042\uffde\045\uffde\047\uffde\051" +
    "\uffde\001\002\000\010\033\120\034\122\043\143\001\002" +
    "\000\014\013\ufffc\016\ufffc\017\ufffc\036\ufffc\037\ufffc\001" +
    "\002\000\004\044\145\001\002\000\014\013\ufffc\016\ufffc" +
    "\017\ufffc\036\ufffc\037\ufffc\001\002\000\016\005\uffdf\014" +
    "\uffdf\042\uffdf\045\uffdf\047\uffdf\051\uffdf\001\002\000\004" +
    "\015\155\001\002\000\020\005\151\012\ufff4\013\ufff4\016" +
    "\ufff4\017\ufff4\036\ufff4\037\ufff4\001\002\000\004\015\152" +
    "\001\002\000\010\006\051\007\053\010\046\001\002\000" +
    "\004\011\154\001\002\000\020\005\ufff2\012\ufff2\013\ufff2" +
    "\016\ufff2\017\ufff2\036\ufff2\037\ufff2\001\002\000\010\006" +
    "\051\007\053\010\046\001\002\000\004\011\157\001\002" +
    "\000\020\005\ufff3\012\ufff3\013\ufff3\016\ufff3\017\ufff3\036" +
    "\ufff3\037\ufff3\001\002\000\004\020\173\001\002\000\006" +
    "\020\uffeb\031\171\001\002\000\004\011\163\001\002\000" +
    "\020\005\161\012\uffee\013\uffee\016\uffee\017\uffee\036\uffee" +
    "\037\uffee\001\002\000\004\020\165\001\002\000\006\040" +
    "\170\041\167\001\002\000\004\011\uffec\001\002\000\006" +
    "\011\uffe2\022\uffe2\001\002\000\006\011\uffe3\022\uffe3\001" +
    "\002\000\004\005\161\001\002\000\004\020\uffea\001\002" +
    "\000\006\040\170\041\167\001\002\000\004\011\uffed\001" +
    "\002\000\006\011\uffe7\021\177\001\002\000\004\011\207" +
    "\001\002\000\004\005\161\001\002\000\004\020\203\001" +
    "\002\000\004\022\202\001\002\000\006\011\uffe6\020\uffe6" +
    "\001\002\000\006\040\170\041\167\001\002\000\006\011" +
    "\205\022\uffe5\001\002\000\004\005\161\001\002\000\004" +
    "\022\uffe4\001\002\000\014\013\ufffc\016\ufffc\017\ufffc\036" +
    "\ufffc\037\ufffc\001\002\000\004\011\211\001\002\000\016" +
    "\012\uffe9\013\uffe9\016\uffe9\017\uffe9\036\uffe9\037\uffe9\001" +
    "\002\000\006\020\uffe7\021\177\001\002\000\004\020\214" +
    "\001\002\000\006\040\170\041\167\001\002\000\004\011" +
    "\216\001\002\000\014\013\ufffc\016\ufffc\017\ufffc\036\ufffc" +
    "\037\ufffc\001\002\000\004\011\220\001\002\000\016\012" +
    "\uffe8\013\uffe8\016\uffe8\017\uffe8\036\uffe8\037\uffe8\001\002" +
    "\000\004\002\001\001\002\000\004\011\223\001\002\000" +
    "\014\012\ufffc\016\ufffc\017\ufffc\036\ufffc\037\ufffc\001\002" +
    "\000\014\012\225\016\017\017\016\036\021\037\020\001" +
    "\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\010\001\001\000\006\003\012\004\011\001\001\000" +
    "\014\006\014\007\023\012\025\015\021\016\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\161\014\157" +
    "\001\001\000\004\010\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\031\022\032" +
    "\024\033\025\035\034\037\001\001\000\002\001\001\000" +
    "\014\011\047\026\114\031\043\035\141\037\112\001\001" +
    "\000\014\011\047\026\114\031\043\035\136\037\112\001" +
    "\001\000\006\003\110\004\011\001\001\000\012\022\106" +
    "\024\033\025\035\034\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\047\026\046\031\043\001\001" +
    "\000\002\001\001\000\004\032\073\001\001\000\002\001" +
    "\001\000\010\023\067\027\054\030\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\047\026\053\031" +
    "\043\001\001\000\002\001\001\000\006\027\054\030\062" +
    "\001\001\000\010\011\047\026\064\031\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\054\030\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\047\026\070\031\043\001" +
    "\001\000\006\027\054\030\062\001\001\000\006\003\072" +
    "\004\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\047\026\076\031\043\033\075\001\001\000\002" +
    "\001\001\000\006\027\054\030\062\001\001\000\012\011" +
    "\047\026\076\031\043\033\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\047\026\103\031\043\001" +
    "\001\000\006\027\054\030\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\011\047\026\114\031\043\035\116" +
    "\037\112\001\001\000\002\001\001\000\010\011\047\026" +
    "\134\031\043\001\001\000\010\027\054\030\062\040\130" +
    "\001\001\000\012\011\047\026\114\031\043\037\124\001" +
    "\001\000\004\036\120\001\001\000\002\001\001\000\014" +
    "\011\047\026\114\031\043\035\123\037\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\047\026\133\031\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\054\030" +
    "\062\001\001\000\006\027\054\030\062\001\001\000\002" +
    "\001\001\000\004\036\120\001\001\000\006\003\140\004" +
    "\011\001\001\000\002\001\001\000\004\036\120\001\001" +
    "\000\006\003\143\004\011\001\001\000\002\001\001\000" +
    "\006\003\145\004\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\163\001\001\000\002\001\001\000\004\021\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\171\001\001\000\002\001\001\000\004\021" +
    "\173\001\001\000\002\001\001\000\004\017\175\001\001" +
    "\000\002\001\001\000\006\014\177\020\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\203\001\001\000\002\001\001\000\006\014\177\020" +
    "\205\001\001\000\002\001\001\000\006\003\207\004\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\212\001\001\000\002\001\001\000\004\021\214\001\001" +
    "\000\002\001\001\000\006\003\216\004\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\223\001\001\000\014\006\014\007" +
    "\023\012\025\015\021\016\022\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(String string, Symbol s){
		System.out.println(string + "Error localizado antes de: Linea "+s.left+" Columna "+s.right); 
	}
	public void unrecovered_syntax_error(String string, Symbol s){ 
                System.out.println("ERROR FATAL: " + string + "Error localizado antes de: Linea "+s.left+" Columna "+s.right); 
        }	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
System.out.println("funciona antes de BLQ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRG ::= program_ identifier puntoComa NT$0 BLQ punto 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        
        //String res = b.cab + b.valor + "\n .";
       // RESULT = b.cab + "int main (void) {" + b.valor + b.cierre;
       // System.out.println(RESULT);
        System.out.println("funcionaAA");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PRG ::= unit_ identifier puntoComa DCLLIST punto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLQ ::= DCLLIST begin_ SENTLIST end_ 
            {
              Blq RESULT =null;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentList sList = (SentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Blq();
        
       // RESULT.cab = dList.valor;
       // RESULT.cierre = "}";
       // RESULT.valor = sList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DCLLIST ::= 
            {
              DcList RESULT =null;
		
        RESULT = new DcList();
        RESULT.valor = "";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DCLLIST ::= DCLLIST DCL 
            {
              DcList RESULT =null;
		int dListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DcList dList = (DcList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        RESULT = new DcList();
        RESULT.valor = dList.valor + d.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTLIST ::= SENT 
            {
              SentList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sent s = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new SentList();
        RESULT.valor = s.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTLIST ::= SENTLIST SENT 
            {
              SentList RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentList sList = (SentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sent s = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new SentList();
        RESULT = sList.valor + s.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DCL ::= DEFCTE 
            {
              Def RESULT =null;
		int dCteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dCteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefCte dCte = (DefCte)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dCte.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCL ::= DEFVAR 
            {
              Def RESULT =null;
		int dVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefVar dVar = (DefVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dVar.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DCL ::= DEFPROC 
            {
              Def RESULT =null;
		int dProcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dProcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefProc dProc = (DefProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dProc.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DCL ::= DEFFUN 
            {
              Def RESULT =null;
		int dFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefFun dFun = (DefFun)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Def();
        RESULT.valor = dFun.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFCTE ::= const_ CTELIST 
            {
              DefCte RESULT =null;
		int cListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CteList cList = (CteList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new DefCte();
        RESULT.valor = cList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CTELIST ::= identifier igual SIMPVALUE puntoComa 
            {
              CteList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Constantes sv = (Constantes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new CteList();
        RESULT.valor = "#define " + id + " " + sv +"; \n";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CTELIST ::= CTELIST identifier igual SIMPVALUE puntoComa 
            {
              CteList RESULT =null;
		int cListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CteList cList = (CteList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Constantes sv = (Constantes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new DefCte();
        RESULT.valor = cList.valor + "#define " + id + " " + sv + "; \n"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SIMPVALUE ::= numeric_integer_const 
            {
              Constantes RESULT =null;
		int nicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nic = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Constantes();
        RESULT.valor = nic;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SIMPVALUE ::= numeric_real_const 
            {
              Constantes RESULT =null;
		int nrcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nrcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nrc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Constantes();
        RESULT.valor = nrc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SIMPVALUE ::= string_const 
            {
              Constantes RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Constantes();
        RESULT.valor = sc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DEFVAR ::= var_ DEFVARLIST puntoComa 
            {
              DefVar RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dvListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefVarList dvList = (DefVarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Def();
        RESULT.valor = dvList.cab + " " + var + dvList.valor + ";\n" ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEFVARLIST ::= VARLIST dosPuntos TBAS 
            {
              DefVarList RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new DefVarList();
        RESULT.valor = vList.valor;
        RESULT.cab = t.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEFVARLIST ::= DEFVARLIST puntoComa VARLIST dosPuntos TBAS 
            {
              DefVarList RESULT =null;
		int dvListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dvListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DefVarList dvList = (DefVarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new DefVarList();
        RESULT.valor = dvList.valor + ";\n" + t.valor+ " " + vList.valor ;
        RESULT.cab = dvList.cab;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VARLIST ::= identifier 
            {
              VarList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new VarList();
        RESULT.valor = id;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VARLIST ::= identifier coma VARLIST 
            {
              VarList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new VarList();
        RESULT = id + ", " + vList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFPROC ::= procedure_ identifier FORMAL_PARAMLIST puntoComa BLQ puntoComa 
            {
              DefProc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FormalParamList fpList = (FormalParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new DefProc();
        RESULT.valor = b.cab + "\n void " + id + fpList.valor + "\n" + b.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEFFUN ::= function_ identifier FORMAL_PARAMLIST dosPuntos TBAS puntoComa BLQ puntoComa 
            {
              DefFun RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FormalParamList fp = (FormalParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Blq b = (Blq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new DefFun();
        RESULT = b.cab + "\n" + t.valor + id + fp.valor + b.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FORMAL_PARAMLIST ::= 
            {
              FormalParamList RESULT =null;
		
        RESULT = new FormalParamList();
        RESULT.valor = "( void )";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FORMAL_PARAMLIST ::= abrirPar FORMAL_PARAM cerrarPar 
            {
              FormalParamList RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalParam fp = (FormalParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new FormalParamList();
        RESULT.valor = "("+fp.valor+")";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS 
            {
              FormalParam RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new FormalParam();
        RESULT.valor = t.valor + " " + vList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS puntoComa FORMAL_PARAM 
            {
              FormalParam RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarList vList = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalParam fp = (FormalParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new FormalParam();
        RESULT.valor = t.valor + vList.valor + ", " + fp.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TBAS ::= int_ 
            {
              Tipo RESULT =null;
		
        RESULT = new Tipo();
        RESULT.valor = "int";        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TBAS ::= real_ 
            {
              Tipo RESULT =null;
		
        RESULT = new Tipo();
        RESULT.valor = "float";        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENT ::= ASIG puntoComa 
            {
              Sent RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asig a = (Asig)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Sent();
        RESULT.valor = a.valor + ": \n";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENT ::= PROC_CALL puntoComa 
            {
              Sent RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcCall pc = (ProcCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Sent();
        RESULT.valor = pc.valor + ";" ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENT ::= if_ EXPCOND then_ BLQ else_ BLQ 
            {
              Sent RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= while_ EXPCOND do_ BLQ 
            {
              Sent RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT ::= repeat_ BLQ until_ EXPCOND puntoComa 
            {
              Sent RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENT ::= for_ identifier puntosIgual EXP INC EXP do_ BLQ 
            {
              Sent RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INC ::= to_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INC ::= downto_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIG ::= ID puntosIgual EXP 
            {
              Asig RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Asig();
        RESULT = id.valor + " = " + e.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ID ::= identifier 
            {
              Id RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new Id();
        RESULT.valor="id";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= EXP OP EXP 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Op o = (Op)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Exp();
        RESULT.valor = e1.valor + o.valor + e2.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= FACTOR 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Exp();
        RESULT.valor = f.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP ::= OPARIT 
            {
              Op RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operadores op = (Operadores)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Op();
        RESULT.valor = op.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPARIT ::= mas_ 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "+";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPARIT ::= menos 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "-";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPARIT ::= mul 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "*";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPARIT ::= div_ 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "/";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPARIT ::= mod_ 
            {
              Operadores RESULT =null;
		
        RESULT = new Operadores();
        RESULT.valor = "%";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FACTOR ::= SIMPVALUE 
            {
              Factor RESULT =null;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constantes sv = (Constantes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new Factor();
        RESULT.valor= sv.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FACTOR ::= abrirPar EXP cerrarPar 
            {
              Factor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT=new Factor();
        RESULT.valor = "(" + e.valor + ")"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FACTOR ::= identifier SUBPPARAMLIST 
            {
              Factor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sublistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sublistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SupParamList sublist = (SupParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT=new Factor();
        RESULT.valor = id.valor + sublist.valor; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SUBPPARAMLIST ::= 
            {
              SupParamList RESULT =null;
		
        RESULT = new SubParamList();
        RESULT.valor = "()";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SUBPPARAMLIST ::= abrirPar EXPLIST cerrarPar 
            {
              SupParamList RESULT =null;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList eList = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new SubParamList();
        RESULT.valor = "(" + eList.valor + ")";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPLIST ::= EXP 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ExpList();
        RESULT.valor = e.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPLIST ::= EXP coma EXPLIST 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList eList = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ExpList();
        RESULT.valor = e.valor + ", " + eList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PROC_CALL ::= identifier SUBPPARAMLIST 
            {
              ProcCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SupParamList subList = (SupParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ProcCall();
        RESULT.valor = id + subList.valor;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPCOND ::= EXPCOND OPLOG EXPCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPCOND ::= FACTORCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPLOG ::= or_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPLOG ::= and_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FACTORCOND ::= EXP OPCOMP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FACTORCOND ::= abrirPar EXP cerrarPar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FACTORCOND ::= not_ FACTORCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPCOMP ::= menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPCOMP ::= mayor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPCOMP ::= menorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPCOMP ::= mayorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPCOMP ::= igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
