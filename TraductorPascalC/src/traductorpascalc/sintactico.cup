package traductorpascalc;
import java_cup.runtime.*;
import java.util.Map.Entry;
import java.util.ArrayList;
action code {:
:}
parser code{:
        
	public void syntax_error(String string, Symbol s){
		System.out.println(string + "Error localizado antes de: Linea "+s.left+" Columna "+s.right); 
	}
	public void unrecovered_syntax_error(String string, Symbol s){ 
                System.out.println("ERROR FATAL: " + string + "Error localizado antes de: Linea "+s.left+" Columna "+s.right); 
        }	
        ArrayList<String> var = new ArrayList<String>();
        ArrayList<String> fun = new ArrayList<String>();
        int nivel = 0;
        int nivelCab = 0;
        String funAct = "";
        String a;
        public String niveles(int n)
        {
            String a="";
            for(int t=0;t<n;t++)
            {
                a = "\t" + a;
            }
            return a;
        }
        
:}

non terminal PRG;
non terminal Blq BLQ;
non terminal DcList DCLLIST;
non terminal SentList SENTLIST;

non terminal Def DCL;
non terminal DefCte DEFCTE;
non terminal CteList CTELIST;
non terminal Constantes SIMPVALUE;
non terminal DefVar DEFVAR;
non terminal DefVarList DEFVARLIST;
non terminal VarList VARLIST;
non terminal DefProc DEFPROC;
non terminal DefFun DEFFUN;
non terminal FormalParamList FORMAL_PARAMLIST;
non terminal FormalParam FORMAL_PARAM;
non terminal Tipo TBAS;

non terminal Sent SENT;
non terminal Inc INC;
non terminal Asig ASIG;
non terminal Id ID;
non terminal Exp EXP;
non terminal Op OP;
non terminal Operadores OPARIT;
non terminal Factor FACTOR;
non terminal SubPparamList SUBPPARAMLIST;
non terminal ExpList EXPLIST;
non terminal ProcCall PROC_CALL;

non terminal ExpCond EXPCOND;
non terminal OpLog OPLOG;
non terminal FactorCond FACTORCOND;
non terminal OpComp OPCOMP;


terminal String program_, identifier,numeric_integer_const,  numeric_real_const, 
    string_const, puntoComa, punto, begin_, end_, igual, procedure_, 
    function_, dosPuntos, abrirPar, cerrarPar, mas_, menos, 
    mul, div_, mod_, coma, puntosIgual, and_, or_, unit_, const_, var_, int_, 
    real_, if_, then_, else_, while_, do_, repeat_, until_, for_, downto_, to_, 
    not_, menor, mayor, menorIgual, mayorIgual;

precedence left mas_, menos;
precedence left mul, div_, and_, or_, mod_;

start with PRG;

PRG ::= program_ identifier:id puntoComa BLQ:b punto {:
        
        RESULT = b.cab + "void main (void) \n{\n" + b.valor + b.cierre;
        System.out.println(""+RESULT);
:} 
        | unit_ identifier puntoComa DCLLIST punto ;

BLQ ::= {:nivelCab++;:}DCLLIST:dList{:nivelCab--;:} begin_ {:nivel++;:}SENTLIST:sList{:nivel--;:} end_ {:
        RESULT = new Blq();
        RESULT.cab = dList.valor;
        RESULT.apertura = "{ \n";           
        RESULT.cierre = "} \n";
        RESULT.valor = sList.valor;
        
:};
DCLLIST ::= {:
        RESULT = new DcList();
        RESULT.valor = "";
:}  | DCLLIST:dList DCL:d {: 
        RESULT = new DcList();
        RESULT.valor = dList.valor + d.valor;
:};
SENTLIST ::= SENT:s{:
        RESULT = new SentList();
        RESULT.valor = s.valor;
:}  | SENTLIST:sList SENT:s {:
        RESULT = new SentList();
        RESULT.valor = sList.valor + s.valor;
:};

DCL ::= DEFCTE:dCte {:
        RESULT = new Def();
        RESULT.valor = dCte.valor;
:}  | DEFVAR:dVar{:
        RESULT = new Def();
        RESULT.valor = dVar.valor;
:}  | DEFPROC:dProc{:
        RESULT = new Def();
        RESULT.valor = dProc.valor;
:}  | DEFFUN:dFun{:
        RESULT = new Def();
        RESULT.valor = dFun.valor;
:};
DEFCTE ::= const_ CTELIST:cList {:
        RESULT = new DefCte();
        RESULT.valor = cList.valor;
:};
CTELIST ::= identifier:id igual SIMPVALUE:sv puntoComa {:
        RESULT = new CteList();
        RESULT.valor = "#define " + id + " " + sv.valor +"\n";
:}  | CTELIST:cList identifier:id igual SIMPVALUE:sv puntoComa {:
        RESULT = new CteList();
        RESULT.valor = cList.valor + "#define " + id + " " + sv.valor + "\n"; 
:};
SIMPVALUE ::= numeric_integer_const:nic {:
        RESULT = new Constantes();
        RESULT.valor = nic;
:}  | numeric_real_const:nrc {:
        RESULT = new Constantes();
        RESULT.valor = nrc;
:}  | string_const:sc {:
        RESULT = new Constantes();
        RESULT.valor = sc;
:};
DEFVAR ::= var_:var DEFVARLIST:dvList puntoComa {:
        RESULT = new DefVar();
        RESULT.valor = dvList.cab + " " + dvList.valor + ";\n" ;
        for(int k = 0;k<nivelCab-1;k++)
        {
            RESULT.valor = "\t" + RESULT.valor;
        }
:};
DEFVARLIST ::= VARLIST:vList dosPuntos TBAS:t {:
        RESULT = new DefVarList();
        RESULT.valor = vList.valor;
        RESULT.cab = t.valor;
        
:}  | DEFVARLIST:dvList puntoComa VARLIST:vList dosPuntos TBAS:t {:
        RESULT = new DefVarList();
        RESULT.valor = dvList.valor + ";\n";
        for(int k = 0;k<nivelCab-1;k++)
        {
            RESULT.valor = RESULT.valor + "\t" ;
        }
        RESULT.valor = RESULT.valor + t.valor+ " " + vList.valor;
        RESULT.cab = dvList.cab;
:};
VARLIST ::= identifier:id {:
        RESULT = new VarList();
        RESULT.valor = id;
        RESULT.max = 1;
        RESULT.lista[0] = id;
        var.add(id);
 
:}  | identifier:id coma VARLIST:vList {:
        RESULT = new VarList();
        RESULT.valor = id + ", " + vList.valor; // para cuando no es una funcion
        for(int i =0; i<vList.max;i++)
        {
            RESULT.lista[i] = vList.lista[i];
        }
        RESULT.lista[vList.max]= id;
        RESULT.max = vList.max +1;
        var.add(id);
:};
DEFPROC ::= procedure_ identifier:id{:funAct="";:} FORMAL_PARAMLIST:fpList puntoComa BLQ:b puntoComa {:
        RESULT = new DefProc();
        funAct="";
        RESULT.valor =  "void " + id + fpList.valor + b.apertura +b.cab + b.valor  + b.cierre;
        fun.add(id);
:};
DEFFUN ::= function_ identifier:id{:fun.add(id);funAct=id;:} FORMAL_PARAMLIST:fp dosPuntos TBAS:t puntoComa BLQ:b puntoComa {:
        RESULT = new DefFun();
        funAct = "";
        RESULT.valor =  t.valor +" "+ id +" "+ fp.valor  + b.apertura + b.cab + b.valor + b.cierre;
        fun.add(id);
:};
FORMAL_PARAMLIST ::= {:
        RESULT = new FormalParamList();
        RESULT.valor = "( void )";
:}  | abrirPar FORMAL_PARAM:fp cerrarPar {:
        RESULT = new FormalParamList();
        RESULT.valor = "("+fp.valor+")";
:};
FORMAL_PARAM ::= VARLIST:vList dosPuntos TBAS:t {:
        RESULT = new FormalParam();
        RESULT.valor = t.valor + " " + vList.valor;
:}  | VARLIST:vList dosPuntos TBAS:t puntoComa FORMAL_PARAM:fp {:
        RESULT = new FormalParam();
        //RESULT.valor = t.valor +" "+ vList.valor + ", " + fp.valor;
        for (int i=vList.max;i>0;i--)
        {
            RESULT.valor = RESULT.valor + t.valor+" "+vList.lista[i-1]+", ";
        }
        RESULT.valor = RESULT.valor + " " + fp.valor;
:};
TBAS ::= int_ {:
        RESULT = new Tipo();
        RESULT.valor = "int";        
:}  | real_ {:
        RESULT = new Tipo();
        RESULT.valor = "float";        
:};

SENT ::= ASIG:a puntoComa{:
        RESULT = new Sent();
        RESULT.valor = a.valor + "; \n";
        for(int m=0;m<nivel;m++)
        {
            RESULT.valor = "\t" + RESULT.valor;
        }
:}  | PROC_CALL:pc puntoComa{:
        RESULT = new Sent();
        RESULT.valor = pc.valor + "; \n" ;
        for(int j=0;j<nivel;j++)
        {
            RESULT.valor = "\t" + RESULT.valor;
        }
:}  | if_ EXPCOND:ec1 then_ BLQ:b1 else_ BLQ:b2 {:
        RESULT = new Sent();
        String aux =niveles(nivel);

        RESULT.valor = aux + "if(" + ec1.valor + ")"; 
        RESULT.valor = RESULT.valor +"\n"+ aux + b1.apertura; 
        RESULT.valor = RESULT.valor + b1.cab + b1.valor;      
        RESULT.valor = RESULT.valor + aux + b1.cierre;
        RESULT.valor = RESULT.valor + aux + "else";
        RESULT.valor = RESULT.valor +"\n"+ aux+ b2.apertura;
        RESULT.valor = RESULT.valor + b2.cab + b2.valor;
        RESULT.valor = RESULT.valor + aux+b2.cierre;
:}  | while_ EXPCOND:ec do_ BLQ:b {:
        String aux = niveles(nivel);
        RESULT = new Sent();
        RESULT.valor = aux + "while("+ec.valor+")";
        RESULT.valor = RESULT.valor +"\n"+ aux + b.apertura;
        RESULT.valor = RESULT.valor + b.cab + b.valor;      
        RESULT.valor = RESULT.valor + aux + b.cierre;
:}  | repeat_ BLQ:b until_ EXPCOND:ec puntoComa {:
        String aux = niveles(nivel);
        RESULT = new Sent();
        RESULT.valor = aux + "do";
        RESULT.valor = RESULT.valor +"\n"+ aux + b.apertura;
        RESULT.valor = RESULT.valor + b.cab + b.valor;  
        RESULT.valor = RESULT.valor + aux + b.cierre;
        RESULT.valor = RESULT.valor + aux + "until("+ec.valor+")\n";
:}  | for_ identifier:id puntosIgual EXP:e1 INC:i EXP:e2 do_ BLQ:b {:
        String aux = niveles(nivel);
        RESULT = new Sent();
        RESULT.valor = aux + "for("+id+"="+e1.valor+";"+id+i.valor+e2.valor+i.numero+";"+id+"="+id+i.numero+")";
        RESULT.valor = RESULT.valor +"\n"+ aux + b.apertura;
        RESULT.valor = RESULT.valor + b.cab + b.valor;      
        RESULT.valor = RESULT.valor + aux + b.cierre;
:}; 
INC ::= to_{:
        RESULT= new Inc();
        RESULT.valor="<";
        RESULT.numero="+1";
:}  | downto_ {:
        RESULT= new Inc();
        RESULT.valor=">";
        RESULT.numero="-1";
:};
ASIG ::= ID:id puntosIgual:p EXP:e{:
        RESULT = new Asig();
        if(id.valor.equals(funAct))
            RESULT.valor = "return " + e.valor;
        else
            RESULT.valor = id.valor + " = " + e.valor;
:} ;
ID ::= identifier:id{:
        RESULT=new Id();
        RESULT.valor=id;
:} ;
EXP ::= EXP:e1 OP:o EXP:e2 {:
        RESULT = new Exp();
        RESULT.valor = e1.valor + o.valor + e2.valor; 
:}  | FACTOR:f {:
        RESULT = new Exp();
        RESULT.valor = f.valor; 
:};
OP ::= OPARIT:op{:
        RESULT = new Op();
        RESULT.valor = op.valor;
:};
OPARIT ::= mas_{:
        RESULT = new Operadores();
        RESULT.valor = "+ ";
:} | menos{:
        RESULT = new Operadores();
        RESULT.valor = "- ";
:} | mul{:
        RESULT = new Operadores();
        RESULT.valor = "* ";
:} | div_{:
        RESULT = new Operadores();
        RESULT.valor = "/ ";
:} | mod_{:
        RESULT = new Operadores();
        RESULT.valor = "% "; 
:} ;
FACTOR ::= SIMPVALUE:sv {:
        RESULT=new Factor();
        RESULT.valor= sv.valor; 
:}  | abrirPar EXP:e cerrarPar {:
        RESULT=new Factor();
        RESULT.valor = "(" + e.valor + ")"; 
:}  | identifier:id SUBPPARAMLIST:subList {:
        RESULT=new Factor();
        if (subList.valor == "")
        {
            if(fun.contains(id))
                RESULT.valor = id + "()";
            else
                RESULT.valor = id;
        }
        else
            RESULT.valor = id + subList.valor;
:};
SUBPPARAMLIST ::= {:
        RESULT = new SubPparamList();
        RESULT.valor = "";
:}  | abrirPar EXPLIST:eList cerrarPar {:
        RESULT = new SubPparamList();
        RESULT.valor = "(" + eList.valor + ")";
:};
EXPLIST ::= EXP:e{:
        RESULT = new ExpList();
        RESULT.valor = e.valor;
:}  | EXP:e coma EXPLIST:eList {:
        RESULT = new ExpList();
        RESULT.valor = e.valor + ", " + eList.valor;
:};
PROC_CALL ::= identifier:id SUBPPARAMLIST:subList {:
        RESULT = new ProcCall();
        if (subList.valor == "")
        {
            if(fun.contains(id))
                RESULT.valor = id + "()";
            else
                RESULT.valor = id;
        }
        else
            RESULT.valor = id + subList.valor;
:} ; 

EXPCOND ::= EXPCOND:ec1 OPLOG:oplog EXPCOND:ec2 {:
        RESULT=new ExpCond();
        RESULT.valor = ec1.valor +" "+ oplog.valor +" "+ ec2.valor;
:}  | FACTORCOND:fc{:
        RESULT=new ExpCond();
        RESULT.valor = fc.valor; 
:} ;
OPLOG ::= or_ {:
        RESULT=new OpLog();
        RESULT.valor = "||";
:}  | and_ {:
        RESULT=new OpLog();
        RESULT.valor = "&&";
:};
FACTORCOND ::= EXP:e1 OPCOMP:oc EXP:e2 {:
        RESULT=new FactorCond();
        RESULT.valor = e1.valor +" "+ oc.valor+" "+e2.valor; 
:}  | abrirPar EXP:e cerrarPar {:
        RESULT=new FactorCond();
        RESULT.valor = "("+e.valor+")";
:}  | not_ FACTORCOND:f {:
        RESULT=new FactorCond();
        RESULT.valor = "!"+f.valor;
:};
OPCOMP ::= menor {:
        RESULT=new OpComp();
        RESULT.valor = "<";
:}  | mayor {:
        RESULT=new OpComp();
        RESULT.valor = ">";
:}  | menorIgual {:
        RESULT=new OpComp();
        RESULT.valor = "<=";
:}  | mayorIgual {:
        RESULT=new OpComp();
        RESULT.valor = ">=";
:}  | igual {:
        RESULT=new OpComp();
        RESULT.valor = "=";
:};